package competition.cig.robinbaumgarten.astar;

import ch.idsia.mario.engine.sprites.Mario;
import competition.cig.robinbaumgarten.astar.level.Level;
import java.lang.Math;

import java.util.ArrayList;

import static java.lang.Math.abs;
import static java.lang.Math.random;
import static java.lang.Math.sqrt;


public class NNSimulator
{

    public LevelScene levelScene;
    public LevelScene workScene;
    public SearchNode bestPosition;
    public SearchNode furthestPosition;
    float currentSearchStartingMarioXPos;
    ArrayList<SearchNode> posPool;
    ArrayList<int[]> visitedStates = new ArrayList<int[]>();
    private float maxMarioSpeed = 10.9090909f;
    private boolean requireReplanning = false;
    public int debugPos = 0;

    public int targetX = 100;
    public int targetY = 100;
    public int timeBudget = 20; // ms
    public static final int visitedListPenalty = 1500;



	/* SEBAS CODE */

	// centroids for game states derived from SOM
	private static double[][] centroids = {
        {0.0, 0.0,0.0,0.0,0.0,-86.82954545454545,-87.54545454545455,-83.1590909090909,-76.91666666666667,-70.73863636363636,-65.14772727272727,-66.02272727272727,-64.57575757575758,-61.84469696969697,-56.17424242424242,-49.803030303030305,-41.58712121212121,-32.48863636363637,-24.625,-17.704545454545453,-13.746212121212121,-6.9393939393939394,0.0,0.0,0.0,-49.18181818181818,-40.75,-39.95075757575758,-26.541666666666668,-25.33712121212121,-25.833333333333332,-29.382575757575758,-33.67424242424242,-33.29924242424242,-33.28787878787879,-27.352272727272727,-27.041666666666668,-20.727272727272727,-15.496212121212121,-10.193181818181818,-6.583333333333333,-2.628787878787879,0.0,0.0,0.0,-49.18181818181818,-39.75,-34.96212121212121,-18.265151515151516,-10.431818181818182,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-41.54545454545455,-33.56818181818182,-29.507575757575758,-15.416666666666666,-8.795454545454545,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.18181818181818182,0.9090909090909091,1.4545454545454546,2.484848484848485,3.878787878787879,3.393939393939394,3.272727272727273,2.606060606060606,1.7575757575757576,1.3333333333333333,1.0303030303030303,0.7878787878787878,0.36363636363636365,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-20.814393939393938,-38.46212121212121,-46.03030303030303,-54.128787878787875,-50.484848484848484,-51.90151515151515,-42.60606060606061,-39.86742424242424,-35.484848484848484,-32.696969696969695,-24.492424242424242,-16.59469696969697,-9.579545454545455,-3.268939393939394,-0.8825757575757576,0.9318181818181818,0.375,0.0,0.0,0.0,-61.28409090909091,-79.35606060606061,-80.26515151515152,-67.96969696969697,-55.765151515151516,-45.25757575757576,-38.53787878787879,-36.746212121212125,-33.166666666666664,-33.79545454545455,-30.87878787878788,-22.66287878787879,-13.943181818181818,-9.170454545454545,-5.178030303030303,-2.3106060606060606,-0.6022727272727273,0.0,0.0,0.0,-112.38636363636364,-111.23484848484848,-107.93939393939394,-104.68560606060606,-99.1780303030303,-95.59469696969697,-90.40530303030303,-86.9469696969697,-78.1969696969697,-70.18181818181819,-58.43560606060606,-49.60606060606061,-38.833333333333336,-29.507575757575758,-20.446969696969695,0.3787878787878788,1.0,9.0,3.2916666666666665,1459.6098484848485},
		{0.0,0.0,0.0,0.0,0.0,-88.17647058823529,-90.88235294117646,-88.63529411764706,-86.56470588235294,-78.97647058823529,-74.95882352941176,-67.36470588235294,-61.10588235294118,-55.16470588235294,-48.705882352941174,-42.72941176470588,-37.55294117647059,-33.311764705882354,-28.058823529411764,-21.435294117647057,-15.005882352941176,-6.2823529411764705,0.0,0.0,0.0,-52.129411764705885,-47.27058823529412,-55.758823529411764,-49.09411764705882,-47.82941176470588,-32.66470588235294,-24.129411764705882,-12.052941176470588,-5.4,-2.447058823529412,-6.094117647058823,-12.18235294117647,-13.358823529411765,-15.776470588235295,-12.117647058823529,-10.905882352941177,-4.847058823529411,0.0,0.0,0.0,-44.03529411764706,-39.92941176470588,-47.1,-41.470588235294116,-40.39411764705882,-27.58235294117647,-20.36470588235294,-10.170588235294117,-4.552941176470588,-2.447058823529412,-6.094117647058823,-12.18235294117647,-13.358823529411765,-15.776470588235295,-12.117647058823529,-10.905882352941177,-4.847058823529411,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-2.070588235294118,-5.152941176470589,-10.3,-11.288235294117648,-13.329411764705883,-10.235294117647058,-9.211764705882352,-4.094117647058823,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.47058823529411764,0.18823529411764706,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.4,0.2,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-43.258823529411764,-26.511764705882353,-15.994117647058824,-2.7823529411764705,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-58.54117647058823,-50.99411764705882,-56.65294117647059,-52.84705882352941,-60.98823529411764,-59.44705882352941,-55.35294117647059,-47.370588235294115,-38.51176470588236,-28.323529411764707,-16.16470588235294,-9.541176470588235,-2.476470588235294,-0.08235294117647059,1.6,0.8,0.2,0.0,0.0,0.0,-55.71764705882353,-47.22941176470588,-50.911764705882355,-46.07058823529412,-52.8,-51.44705882352941,-47.917647058823526,-44.805882352941175,-36.970588235294116,-27.794117647058822,-19.75294117647059,-17.176470588235293,-16.17058823529412,-14.4,-11.91764705882353,-9.08235294117647,-4.2,0.0,0.0,0.0,-111.70588235294117,-112.30588235294118,-112.61176470588235,-106.88235294117646,-98.0,-89.17058823529412,-82.55294117647058,-75.12941176470588,-69.05882352941177,-60.976470588235294,-54.023529411764706,-47.294117647058826,-40.01764705882353,-33.34117647058824,-25.970588235294116,0.38823529411764707,1.0,9.0,8.964705882352941,1139.2882352941176},
		{0.0,0.0,0.0,0.0,0.0,-88.93939393939394,-92.97979797979798,-91.36363636363636,-93.16161616161617,-91.84848484848484,-93.86868686868686,-94.11111111111111,-91.18181818181819,-82.55555555555556,-72.1010101010101,-62.14141414141414,-55.05050505050505,-48.64646464646464,-41.23232323232323,-33.292929292929294,-24.88888888888889,-11.666666666666666,0.0,0.0,0.0,-48.02020202020202,-56.26262626262626,-73.96969696969697,-74.83838383838383,-76.03030303030303,-71.66666666666667,-55.06060606060606,-46.64646464646464,-25.92929292929293,-16.505050505050505,-8.363636363636363,-16.757575757575758,-18.77777777777778,-22.96969696969697,-20.80808080808081,-18.727272727272727,-8.323232323232324,0.0,0.0,0.0,-48.02020202020202,-56.26262626262626,-73.96969696969697,-74.83838383838383,-76.03030303030303,-71.66666666666667,-55.06060606060606,-46.64646464646464,-25.92929292929293,-16.505050505050505,-7.393939393939394,-14.171717171717171,-15.868686868686869,-19.414141414141415,-17.575757575757574,-15.818181818181818,-7.03030303030303,0.0,0.0,0.0,-40.58585858585859,-47.535353535353536,-62.494949494949495,-63.2020202020202,-64.23232323232324,-60.515151515151516,-46.494949494949495,-39.37373737373738,-21.88888888888889,-13.919191919191919,-1.7373737373737375,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,4.7272727272727275,3.2323232323232323,0.6464646464646465,1.1313131313131313,3.5555555555555554,4.848484848484849,6.303030303030303,5.171717171717172,5.818181818181818,4.202020202020202,4.686868686868687,2.7474747474747474,1.6161616161616161,0.32323232323232326,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,15.797979797979798,14.080808080808081,12.707070707070708,9.616161616161616,5.151515151515151,3.090909090909091,0.6868686868686869,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-119.0,-119.0,-119.0,-119.0,-119.0,-119.0,-119.0,-119.0,-109.31313131313131,-91.22222222222223,-66.05050505050505,-51.58585858585859,-33.61616161616162,-25.171717171717173,-13.191919191919192,-7.171717171717172,-1.1919191919191918,0.0,0.0,0.0,-103.0,-103.0,-103.0,-103.0,-103.0,-103.0,-103.0,-103.0,-94.60606060606061,-78.93939393939394,-57.16161616161616,-44.63636363636363,-29.09090909090909,-21.77777777777778,-15.05050505050505,-14.666666666666666,-7.0606060606060606,0.0,0.0,0.0,-103.0,-103.0,-103.0,-103.0,-103.0,-103.0,-103.0,-103.0,-94.60606060606061,-78.93939393939394,-57.16161616161616,-44.63636363636363,-29.09090909090909,-21.77777777777778,-14.565656565656566,-13.535353535353535,-6.252525252525253,0.0,0.0,0.0,-103.0,-103.0,-103.0,-103.0,-103.0,-103.0,-103.0,-103.0,-94.21212121212122,-85.33333333333333,-76.44444444444444,-68.36363636363636,-58.484848484848484,-49.61616161616162,-38.82828282828283,1.0,1.0,9.0,0.2828282828282828,916.1818181818181},
		{0.0,0.0,0.0,0.0,0.0,-86.91176470588235,-86.3529411764706,-86.65686274509804,-83.08333333333333,-74.03921568627452,-71.25,-63.07843137254902,-55.32843137254902,-52.254901960784316,-43.833333333333336,-37.833333333333336,-29.475490196078432,-18.573529411764707,-13.004901960784315,-8.602941176470589,-5.617647058823529,-2.4705882352941178,0.0,0.0,0.0,-7.588235294117647,-14.205882352941176,-25.348039215686274,-27.823529411764707,-35.92156862745098,-35.3235294117647,-35.85294117647059,-41.01470588235294,-40.38235294117647,-33.338235294117645,-25.186274509803923,-17.068627450980394,-6.019607843137255,-2.8627450980392157,-1.7254901960784315,-2.5784313725490198,-1.7107843137254901,0.0,0.0,0.0,-6.882352941176471,-13.735294117647058,-25.034313725490197,-27.823529411764707,-35.92156862745098,-35.3235294117647,-35.85294117647059,-41.01470588235294,-40.38235294117647,-33.338235294117645,-25.186274509803923,-17.068627450980394,-6.019607843137255,-2.0,0.0,0.0,0.0,0.0,0.0,0.0,-2.588235294117647,-9.46078431372549,-19.735294117647058,-23.50980392156863,-30.352941176470587,-29.833333333333332,-30.284313725490197,-34.661764705882355,-34.1078431372549,-28.16176470588235,-21.264705882352942,-14.401960784313726,-5.078431372549019,-1.6862745098039216,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-60.0735294117647,-48.318627450980394,-27.598039215686274,-13.745098039215685,-0.5784313725490197,0.0,0.0,0.16666666666666666,0.0,-3.5294117647058822,-9.382352941176471,-14.049019607843137,-14.019607843137255,-15.200980392156863,-12.264705882352942,-9.916666666666666,-5.254901960784314,0.0,0.0,0.0,-52.416666666666664,-45.759803921568626,-37.07843137254902,-37.80392156862745,-29.686274509803923,-35.02450980392157,-30.28921568627451,-28.63235294117647,-39.15686274509804,-35.75,-37.27450980392157,-31.901960784313726,-19.098039215686274,-15.47549019607843,-10.617647058823529,-8.583333333333334,-4.549019607843137,0.0,0.0,0.0,-110.83333333333333,-112.1078431372549,-114.6470588235294,-105.95588235294117,-95.11764705882354,-89.5343137254902,-83.40686274509804,-78.32843137254902,-70.43627450980392,-61.03921568627451,-52.23529411764706,-43.794117647058826,-35.57843137254902,-26.044117647058822,-16.264705882352942,0.43137254901960786,1.0,9.0,4.142156862745098,1291.1911764705883},
		{0.0,0.0,0.0,0.0,0.0,-89.73626373626374,-88.62637362637362,-88.45054945054945,-85.49450549450549,-69.5,-62.62637362637363,-55.510989010989015,-48.532967032967036,-46.16483516483517,-42.01648351648352,-37.89010989010989,-30.043956043956044,-23.082417582417584,-16.642857142857142,-10.994505494505495,-8.126373626373626,-3.8241758241758244,0.0,0.0,0.0,-36.747252747252745,-30.45054945054945,-20.95054945054945,-18.653846153846153,-19.895604395604394,-24.967032967032967,-28.373626373626372,-39.19230769230769,-42.989010989010985,-40.18681318681319,-29.928571428571427,-21.395604395604394,-9.010989010989011,-4.483516483516484,0.0,0.0,0.0,0.0,0.0,0.0,-36.747252747252745,-30.45054945054945,-20.95054945054945,-18.653846153846153,-18.576923076923077,-22.32967032967033,-24.417582417582416,-33.12637362637363,-36.30769230769231,-33.94505494505494,-25.26923076923077,-18.054945054945055,-7.604395604395604,-3.78021978021978,0.0,0.0,0.0,0.0,0.0,0.0,-31.032967032967033,-25.703296703296704,-17.697802197802197,-15.752747252747254,-9.565934065934066,-6.675824175824176,-2.3846153846153846,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,7.142857142857143,7.489010989010989,7.527472527472527,4.714285714285714,2.6373626373626373,0.7032967032967034,0.43956043956043955,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.5604395604395604,0.9340659340659341,1.120879120879121,0.7472527472527473,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-117.7032967032967,-119.01098901098901,-118.91758241758242,-105.18681318681318,-76.41208791208791,-55.42307692307692,-27.395604395604394,-12.335164835164836,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-103.32967032967034,-103.15384615384616,-102.91758241758242,-91.03296703296704,-66.12637362637362,-47.95054945054945,-23.703296703296704,-10.664835164835164,-9.89010989010989,-16.417582417582416,-20.335164835164836,-27.571428571428573,-25.543956043956044,-22.906593406593405,-13.714285714285714,-8.115384615384615,-3.0714285714285716,0.0,0.0,0.0,-103.0,-103.0,-102.91758241758242,-91.03296703296704,-66.12637362637362,-47.95054945054945,-23.703296703296704,-10.664835164835164,-8.571428571428571,-14.219780219780219,-17.60989010989011,-23.87912087912088,-22.115384615384617,-19.82967032967033,-11.868131868131869,-7.346153846153846,-2.818681318681319,0.0,0.0,0.0,-103.0,-103.0,-102.83516483516483,-100.62637362637362,-84.88461538461539,-76.07692307692308,-68.54395604395604,-61.06043956043956,-56.65934065934066,-50.895604395604394,-42.857142857142854,-34.395604395604394,-24.95054945054945,-17.14835164835165,-9.664835164835164,0.4230769230769231,1.0,9.0,3.197802197802198,985.2912087912088},
		{0.0,0.0,0.0,0.0,0.0,-97.61691542288557,-95.50746268656717,-94.68159203980099,-92.39800995024876,-90.24378109452736,-84.99004975124379,-79.71144278606965,-76.19900497512438,-66.65671641791045,-61.776119402985074,-54.56716417910448,-47.791044776119406,-38.527363184079604,-32.134328358208954,-25.114427860696516,-18.98507462686567,-8.592039800995025,0.0,0.0,0.0,-63.995024875621894,-58.308457711442784,-47.55223880597015,-42.308457711442784,-32.83582089552239,-29.63681592039801,-26.81592039800995,-26.940298507462686,-26.218905472636816,-23.00497512437811,-25.65671641791045,-24.054726368159205,-20.0,-16.885572139303484,-12.82089552238806,-10.233830845771145,-4.606965174129353,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-2.0696517412935322,-10.845771144278608,-14.900497512437811,-21.079601990049753,-22.577114427860696,-25.65671641791045,-24.054726368159205,-20.0,-16.885572139303484,-12.82089552238806,-10.233830845771145,-4.606965174129353,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.7512437810945274,-9.17412935323383,-12.592039800995025,-17.81592039800995,-19.074626865671643,-21.676616915422887,-20.313432835820894,-16.895522388059703,-14.25870646766169,-10.83084577114428,-5.348258706467662,-3.054726368159204,0.3582089552238806,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.7761194029850746,1.4328358208955223,1.3134328358208955,1.791044776119403,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.417910447761194,2.0945273631840795,2.716417910447761,4.447761194029851,3.6965174129353233,4.582089552238806,3.27363184079602,3.9502487562189055,2.746268656716418,3.2388059701492535,2.243781094527363,2.845771144278607,2.800995024875622,2.174129353233831,1.671641791044776,0.7164179104477612,0.31840796019900497,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.855721393034826,2.0,1.9253731343283582,1.2885572139303483,1.4228855721393034,0.6517412935323383,0.05472636815920398,0.0,0.0,0.0,0.6766169154228856,2.199004975124378,2.3681592039800994,2.8756218905472637,2.3681592039800994,1.691542288557214,0.6766169154228856,0.0,0.0,0.0,4.641791044776119,5.104477611940299,4.791044776119403,3.2786069651741294,3.572139303482587,1.6069651741293531,0.13432835820895522,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-13.761194029850746,-26.383084577114428,-34.34825870646766,-50.12935323383085,-55.09950248756219,-66.58706467661692,-69.7860696517413,-80.05970149253731,-73.45771144278606,-74.08457711442786,-71.69154228855722,-62.76119402985075,-50.91542288557214,-42.03482587064676,-33.15422885572139,-24.865671641791046,-11.248756218905474,0.0,0.0,0.0,-117.22885572139303,-116.31343283582089,-114.65174129353234,-112.98507462686567,-109.58706467661692,-105.45771144278606,-99.19402985074628,-92.96517412935323,-80.74626865671642,-72.27363184079601,-63.36318407960199,-54.38805970149254,-44.069651741293534,-36.38308457711443,-28.696517412935325,-21.52238805970149,-9.7363184079602,0.0,0.0,0.0,-103.0,-103.0,-103.0,-102.48756218905473,-100.95024875621891,-97.87562189054727,-93.2636815920398,-88.13930348258707,-77.8905472636816,-70.20398009950249,-62.517412935323385,-54.318407960199,-44.069651741293534,-36.38308457711443,-28.696517412935325,-21.52238805970149,-9.7363184079602,0.0,0.0,0.0,-103.0,-103.0,-103.0,-102.46766169154229,-100.87064676616916,-97.67661691542288,-92.88557213930348,-87.56218905472637,-76.91542288557214,-68.93034825870647,-60.9452736318408,-52.42786069651741,-41.78109452736319,-33.79601990049751,-25.81094527363184,0.6268656716417911,1.0,8.761194029850746,8.25870646766169,750.0248756218906},
		{0.0,0.0,0.0,0.0,0.0,-92.62579730687456,-92.6144578313253,-92.38979447200568,-87.7937632884479,-84.54642097802977,-83.00637845499645,-81.0921332388377,-72.96598157335224,-63.53153791637137,-55.1218993621545,-45.34798015591779,-36.503189227498225,-26.867469879518072,-20.41743444365698,-13.287739192062368,-9.335223245924876,-3.9099929128277817,0.0,0.0,0.0,-43.60170092133239,-43.678951098511696,-44.228206945428774,-52.98653437278526,-58.206236711552094,-61.824238128986536,-61.38199858256556,-56.63217576187101,-45.60170092133239,-37.10063784549965,-29.217576187101347,-24.072997873848333,-17.941885187810065,-14.11268603827073,-10.326718639262934,-7.471296952515946,-3.274982282069454,0.0,0.0,0.0,-19.39404677533664,-17.161587526576895,-17.501771793054573,-24.547838412473425,-31.97165131112686,-35.98086463501063,-37.975194897236,-34.435152374202694,-25.594613749114103,-18.002834868887312,-12.908575478384124,-10.144578313253012,-7.666902905740609,-5.995038979447201,-4.675407512402551,-3.141743444365698,-1.3883770375620128,0.0,0.0,0.0,-16.377746279234586,-14.496810772501771,-14.780297661233169,-20.749114103472714,-27.016300496102055,-30.401842664776755,-32.07866761162296,-29.082919914953933,-21.6144578313253,-15.20198440822112,-10.90148830616584,-8.56839121190645,-6.476257973068746,-5.065201984408221,-3.9496810772501774,-2.6541459957476965,-1.1729270021261518,0.0,0.0,0.0,0.0,0.03543586109142452,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0453579021970234,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.7186392629340892,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.7838412473423104,3.689581856839121,1.6116229624379872,1.520198440822112,1.2508858965272855,1.137491141034727,1.0106307583274274,0.9220411055988661,0.8277817150956768,0.7512402551381998,0.7973068745570517,0.7030474840538625,0.6045357902197024,0.5102763997165131,0.35294117647058826,0.25513819985825653,0.11268603827072998,0.0,0.0,0.0,2.0219702338766834,6.604535790219702,1.7236002834868887,1.5301204819277108,1.3550673281360737,1.2147413182140325,1.6250885896527285,2.69950389794472,3.52586817859674,3.799433026222537,3.1424521615875265,2.4365698086463503,1.73706591070163,1.2246633593196314,0.742735648476258,0.4649184975194897,0.18001417434443656,0.0,0.0,0.0,0.12048192771084337,1.1417434443656982,0.12048192771084337,0.07228915662650602,0.0,0.0,0.0,0.7228915662650602,0.8192771084337349,0.5783132530120482,0.9156626506024096,0.6987951807228916,0.6746987951807228,0.3614457831325301,0.2891566265060241,0.14457831325301204,0.07228915662650602,0.0,0.0,0.0,1.4514528703047485,1.5067328136073708,1.564847625797307,1.3210489014883062,0.88731396172927,0.5102763997165131,0.7271438695960312,4.259390503189228,5.407512402551382,5.27710843373494,4.626506024096385,3.397590361445783,2.6265060240963853,1.7108433734939759,1.0843373493975903,0.6024096385542169,0.21686746987951808,0.0,0.0,0.0,-21.912119064493268,-19.055988660524452,-19.55846917080085,-17.200566973777462,-15.766123316796598,-13.324592487597448,-14.859673990077958,-13.160878809355067,-12.739900779588943,-11.048901488306166,-10.036853295535082,-8.180722891566266,-6.9163713678242384,-5.410347271438696,-4.097094259390503,-2.8313253012048194,-1.301913536498937,0.0,0.0,0.0,-41.33805811481219,-39.049610205528,-37.050318922749824,-34.82211197732105,-30.649184975194895,-32.07299787384834,-42.82069454287739,-49.03260099220411,-48.31112686038271,-44.745570517363575,-38.53012048192771,-30.970942593905033,-22.19277108433735,-16.93905031892275,-11.212615166548547,-7.806520198440822,-3.1275690999291283,0.0,0.0,0.0,-49.88447909284196,-50.45783132530121,-49.547838412473425,-49.79021970233877,-46.49184975194897,-46.5995747696669,-53.597448618001415,-56.254429482636425,-52.92629340892984,-47.55917788802268,-39.773210489014886,-33.7214741318214,-25.514528703047485,-20.320340184266477,-13.790219702338767,-9.985116938341601,-4.2041105598866055,0.0,0.0,0.0,-111.3359319631467,-111.33451452870305,-111.71438695960312,-108.56626506024097,-102.25159461374912,-97.76683203401842,-93.18143160878809,-83.10134656272147,-71.51311126860382,-60.8532955350815,-49.33238837703756,-38.68958185683912,-27.691708008504605,-19.92912827781715,-11.933380581148121,0.37632884479092843,1.0,8.10276399716513,5.192771084337349,1881.9695251594615},
		{0.0,0.0,0.0,0.0,0.0,-86.5,-87.0,-87.0,-87.0,-87.0,-43.5,-43.5,-21.75,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-25.5,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-21.5,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-119.25,-119.0,-119.0,-119.0,-118.25,0.0,0.0,8.5,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-103.25,-103.0,-103.0,-103.0,-102.25,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-106.5,-103.0,-103.0,-103.0,-101.5,-57.5,-57.5,-26.75,4.0,4.0,4.0,4.0,4.0,4.0,4.0,0.0,1.0,9.0,9.0,1217.25},
		{0.0,0.0,0.0,0.0,0.0,-90.76201372997711,-93.72425629290618,-93.21052631578948,-94.10297482837528,-97.35469107551488,-97.39302059496568,-98.29118993135012,-96.09725400457666,-88.6733409610984,-75.98970251716247,-60.12585812356979,-45.44736842105263,-36.285469107551485,-21.411899313501145,-6.424485125858124,-3.208237986270023,-0.8712814645308925,0.0,0.0,0.0,-45.36727688787185,-50.12471395881007,-60.7929061784897,-74.86899313501144,-80.25114416475972,-83.9187643020595,-82.61670480549199,-80.87242562929062,-74.5,-63.55205949656751,-50.34610983981693,-37.26029748283753,-28.848970251716246,-16.110983981693362,-3.774599542334096,-1.5394736842105263,-0.2477116704805492,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.15789473684210525,0.11670480549199085,0.2128146453089245,1.5446224256292906,3.289473684210526,2.147025171624714,3.8506864988558354,3.0938215102974826,0.9267734553775744,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.013729977116704805,0.02745995423340961,0.11670480549199085,0.020594965675057208,0.0,0.04290617848970252,0.10011441647597254,0.8009153318077803,4.662471395881007,1.0297482837528604,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.5148741418764302,9.23913043478261,1.5017162471395882,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.04290617848970252,4.4050343249427915,1.8163615560640731,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.036041189931350116,0.05434782608695652,0.10240274599542334,0.11498855835240275,0.06064073226544622,0.0,0.0,0.0,9.68421052631579,7.679633867276888,6.7917620137299775,4.796338672768878,1.9588100686498855,0.7597254004576659,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.8123569794050344,2.013729977116705,3.037757437070938,3.1624713958810067,2.124141876430206,1.986842105263158,3.6161327231121283,4.213386727688787,3.6996567505720823,3.335812356979405,1.8237986270022883,1.7048054919908466,2.482265446224256,1.4330663615560641,0.17963386727688788,0.10068649885583524,0.0,0.0,0.0,0.0,2.2688787185354693,5.262013729977117,7.81350114416476,8.017162471395881,5.309496567505721,5.062356979405035,9.199656750572082,10.611556064073227,9.393020594965675,8.360983981693364,4.551487414187643,4.350114416475972,6.271739130434782,3.529176201372998,0.45423340961098396,0.2471395881006865,0.0,0.0,0.0,0.0,2.0938215102974826,5.125858123569794,7.696796338672769,7.9588100686498855,5.309496567505721,5.062356979405035,8.787757437070939,10.33695652173913,9.118421052631579,7.94908466819222,3.933638443935927,3.5966819221967965,4.422768878718536,1.1361556064073226,-1.6630434782608696,-1.3220823798627002,-0.6819221967963387,0.0,0.0,0.0,-119.0,-119.0,-119.0,-118.52345537757436,-116.8895881006865,-115.18764302059496,-113.81922196796339,-111.2345537757437,-102.72482837528604,-88.0858123569794,-70.10983981693364,-53.20022883295194,-42.72597254004577,-25.42105263157895,-7.845537757437071,-3.922196796338673,-1.081807780320366,0.0,0.0,0.0,-103.0,-103.0,-103.0,-102.58752860411899,-101.1733409610984,-99.70022883295195,-98.52173913043478,-96.28260869565217,-88.9170480549199,-76.24828375286042,-60.692219679633865,-46.078947368421055,-37.06350114416476,-22.155606407322654,-6.953089244851259,-3.5354691075514872,-1.0017162471395882,0.0,0.0,0.0,-103.0,-103.0,-103.0,-102.57151029748283,-101.10240274599542,-99.5720823798627,-98.34782608695652,-96.02173913043478,-88.37013729977117,-75.20938215102974,-59.04919908466819,-43.86842105263158,-34.50286041189931,-19.016018306636155,-3.223112128146453,0.18192219679633867,1.0,6.33466819221968,4.511441647597254,567.6481693363844}
    };

	// contains values for state action relationships
	private static float[][] qtable;

	// contains a list of recent actions, used to modify qtable
	private static ArrayList<Integer[]> recent_actions;

	// learning constant
	private static float gamma;

	// translates col in q table to actual button presses
	static boolean[][] possible_actions = {
			// move lefts
			{true, false, false, false, false},
			{true, false, false, false, true},
			{true, false, false, true, false},
			{true, false, false, true, true},

			// move rights
			{false, true, false, false, false},
			{false, true, false, false, true},
			{false, true, false, true, false},
			{false, true, false, true, true},

			// move not
			{false, false, false, false, false},
			{false, false, false, false, true},
			{false, false, false, true, false},
			{false, false, false, true, true},
	};

	// static variable used to keep tabs of current move at all times, updated when requested
	static boolean[] action = {false, false, false, false, false};
	// 1. left
	// 2. right
	// 3. down
	// 4. jump
	// 5. speed

	// passed current game snapshot as argument,
	// compares against centroids to determine matching state
	public static int determineState(double[] game_snap)
	{
		double min_dist = -1;
		int best_state  = -1;

		for (int i = 0; i < 9; i++)
		{
			double running_sum = 0;
			for (int j = 0; j < 305; j++)
			{
				running_sum += Math.pow((game_snap[j] - centroids[i][j]), 2);
			}
			running_sum = sqrt(running_sum);
			if (min_dist == -1)
			{
				min_dist   = running_sum;
				best_state = i;
			}
			else if (running_sum < min_dist)
			{
				min_dist   = running_sum;
				best_state = i;
			}
		}
		return best_state;
	}

	/* SEBAS CODE */



    //private int visitedClashes = 0;
    //private LevelScene lsCopy;

    //private int searchResolution = 10;

    private ArrayList<boolean[]> currentActionPlan;
    int ticksBeforeReplanning = 0;


	private class SearchNode
	{
		private int timeElapsed = 0;
		public float remainingTimeEstimated = 0;
		private float remainingTime = 0;

		public SearchNode parentPos = null;
		public SearchNode chosenChild = null;
		public LevelScene sceneSnapshot = null;
		public int distanceFromOrigin = 0;
		public boolean hasBeenHurt = false;
		public boolean isInVisitedList = false;

		boolean[] action;
		int repetitions = 1;


		public float calcRemainingTime(float marioX, float marioXA)
		{
			return (100000 - (maxForwardMovement(marioXA, 1000) + marioX))
				/ maxMarioSpeed - 1000;
		}

		public float getRemainingTime()
		{
			if (remainingTime > 0)
				return remainingTime;
			else
				return remainingTimeEstimated;
		}

		public float estimateRemainingTimeChild(boolean[] action, int repetitions)
		{
			float[] childbehaviorDistanceAndSpeed = estimateMaximumForwardMovement(
					levelScene.mario.xa, action, repetitions);
			return calcRemainingTime(levelScene.mario.x + childbehaviorDistanceAndSpeed[0],
					childbehaviorDistanceAndSpeed[1]);
		}

		public SearchNode(boolean[] action, int repetitions, SearchNode parent)
		{
	    	this.parentPos = parent;
	    	if (parent != null)
	    	{
	    		this.remainingTimeEstimated = parent.estimateRemainingTimeChild(action, repetitions);
	    		this.distanceFromOrigin = parent.distanceFromOrigin + 1;
	    	}
	    	else
	    		this.remainingTimeEstimated = calcRemainingTime(levelScene.mario.x, 0);
	    	this.action = action;
	    	this.repetitions = repetitions;
	    	if (parent != null)
	    		timeElapsed = parent.timeElapsed + repetitions;
	    	else
	    		timeElapsed = 0;
		}

		public float simulatePos()
		{
	    	// set state to parents scene
			if (parentPos.sceneSnapshot == null)
			{
				System.out.println("DAMN! NO SNAPSHOT!");
			}
			levelScene = parentPos.sceneSnapshot;
			parentPos.sceneSnapshot = backupState();

			int initialDamage = getMarioDamage();
	    	for (int i = 0; i < repetitions; i++)
	    	{
	    		/*if (debugPos < 1000)
	    		{
	    			GlobalOptions.Pos[debugPos][0] = (int) levelScene.mario.x;
	    			GlobalOptions.Pos[debugPos][1] = (int) levelScene.mario.y;
	    			debugPos++;
	    		}*/
	    		advanceStep(action);
	    		/*if (debugPos < 1000)
	    		{
	    			GlobalOptions.Pos[debugPos][0] = (int) levelScene.mario.x;
	    			GlobalOptions.Pos[debugPos][1] = (int) levelScene.mario.y;
	    			debugPos++;
	    		}*/
	    		if (debugPos > 1000)
	    			debugPos = 0;
	    	}
	    	remainingTime = calcRemainingTime(levelScene.mario.x, levelScene.mario.xa)
	    	 	+ (getMarioDamage() - initialDamage) * (1000000 - 100 * distanceFromOrigin);
	    	if (isInVisitedList)
	    		remainingTime += visitedListPenalty;
	    	hasBeenHurt = (getMarioDamage() - initialDamage) != 0;
	    	sceneSnapshot = backupState();

	    	return remainingTime;
		}

		public ArrayList<SearchNode> generateChildren()
		{
			ArrayList<SearchNode> list = new ArrayList<SearchNode>();
			ArrayList<boolean[]> possibleActions = createPossibleActions(this);

			for (boolean[] action: possibleActions)
			{
				list.add(new SearchNode(action, repetitions, this));
			}
			return list;
		}

	}



	/* SEBAS CODE */

    public NNSimulator()
    {
    	initialiseSimulator();

		// initialize arraylist for qlearning actions
		recent_actions = new ArrayList<Integer[]>();

		// initialize qtable to have values between 0 and 100
		qtable = new float[9][12];
		for (int i = 0; i < 9; i++)
		{
			for (int j = 0; j < 12; j++)
			{
				qtable[i][j] = (float)(random()*1000);
			}
		}
    }
    
    /* SEBAS CODE */



    public boolean canJumpHigher(SearchNode currentPos, boolean checkParent)
    {
    	if (currentPos.parentPos != null && checkParent
    			&& canJumpHigher(currentPos.parentPos, false))
    			return true;
    	return currentPos.sceneSnapshot.mario.mayJump() || (currentPos.sceneSnapshot.mario.jumpTime > 0);
    }
    
    private ArrayList<boolean[]> createPossibleActions(SearchNode currentPos)
    {
    	ArrayList<boolean[]> possibleActions = new ArrayList<boolean[]>();
    	// do nothing
    	//possibleActions.add(createAction(false, false, false, false, false));

    	//possibleActions.add(createAction(false, false, true, false, false));
    	// jump
    	if (canJumpHigher(currentPos, true)) possibleActions.add(createAction(false, false, false, true, false));
    	if (canJumpHigher(currentPos, true)) possibleActions.add(createAction(false, false, false, true, true));
    	
    	// run right
    	possibleActions.add(createAction(false, true, false, false, true));
    	if (canJumpHigher(currentPos, true))  possibleActions.add(createAction(false, true, false, true, true));
    	possibleActions.add(createAction(false, true, false, false, false));
    	if (canJumpHigher(currentPos, true))  possibleActions.add(createAction(false, true, false, true, false));
 	
    	// run left
    	possibleActions.add(createAction(true, false, false, false, false));
    	if (canJumpHigher(currentPos, true))  possibleActions.add(createAction(true, false, false, true, false));
    	possibleActions.add(createAction(true, false, false, false, true));
    	if (canJumpHigher(currentPos, true))  possibleActions.add(createAction(true, false, false, true, true));
  	
    	
    	// duck (probably sucks always)
    	
    	return possibleActions;
    }
    
    private boolean[] createAction(boolean left, boolean right, boolean down, boolean jump, boolean speed)
    {
    	boolean[] action = new boolean[5];
    	action[Mario.KEY_DOWN] = down;
    	action[Mario.KEY_JUMP] = jump;
    	action[Mario.KEY_LEFT] = left;
    	action[Mario.KEY_RIGHT] = right;
    	action[Mario.KEY_SPEED] = speed;
    	return action;
    }
    
    public float[] estimateMaximumForwardMovement(float currentAccel, boolean[] action, int ticks)
    {
    	float dist = 0;
    	float runningSpeed =  action[Mario.KEY_SPEED] ? 1.2f : 0.6f;
    	int dir = 0;
    	if (action[Mario.KEY_LEFT]) dir = -1;
    	if (action[Mario.KEY_RIGHT]) dir = 1;
    	for (int i = 0; i < ticks; i++)
    	{
    		currentAccel += runningSpeed * dir;
    		dist += currentAccel;
    		//System.out.println("Estimator of Fastforward Speed, Tick "+i+" speed: "+currentAccel);
    		currentAccel *= 0.89f;
    	}    	
    	float[] ret = new float[2];
    	ret[0] = dist;
    	ret[1] = currentAccel;
    	return ret;
    }
    
    // distance covered at maximum acceleration with initialSpeed for ticks timesteps 
    private float maxForwardMovement(float initialSpeed, int ticks)
    {
    	float y = ticks;
    	float s0 = initialSpeed;
    	return (float) (99.17355373 * Math.pow(0.89,y+1)
    	  -9.090909091*s0*Math.pow(0.89,y+1)
    	  +10.90909091*y-88.26446282+9.090909091*s0);
    }
    
    private int getMarioDamage()
    {
    	// early damage at gaps: Don't even fall 1 px into them.
    	if (levelScene.level.isGap[(int) (levelScene.mario.x/16)] &&
    			levelScene.mario.y > levelScene.level.gapHeight[(int) (levelScene.mario.x/16)]*16)
    	{
    		//System.out.println("Gap height: "+levelScene.level.gapHeight[(int) (levelScene.mario.x/16)]);
    		levelScene.mario.damage+=5;
    	}
    	return levelScene.mario.damage;
    }
    

    
    private void search(long startTime)
    {
    	SearchNode current = bestPosition;
    	//SearchNode furthest = bestPosition;
    	boolean currentGood = false;
    	int ticks = 0;
    	int maxRight = 176;
    	while(posPool.size() != 0 
    			//&& ((levelScene.mario.x - currentSearchStartingMarioXPos < maxRight) || !currentGood) 
    			&& ((bestPosition.sceneSnapshot.mario.x - currentSearchStartingMarioXPos < maxRight) || !currentGood) 
    			//&& ((System.currentTimeMillis() - startTime < 35) || (ticks < 200)))
    			&& (System.currentTimeMillis() - startTime < Math.min(200,timeBudget/2)))
    			//&& ticks < 200)
    	{
    		ticks++;
    		current = pickBestPos(posPool);
    		currentGood = false;
    		float realRemainingTime = current.simulatePos();
    		
    		//System.out.println("Simulated mariopos: "+ current.sceneSnapshot.mario.x + " " + current.sceneSnapshot.mario.y);
    		if (realRemainingTime < 0)
    		{
    			System.out.print("-");
    			continue;
    		}
    		else if  (!current.isInVisitedList 
    				&& isInVisited((int) current.sceneSnapshot.mario.x, (int) current.sceneSnapshot.mario.y, current.timeElapsed))
	   		{
    			if (levelScene.verbose > 12) System.out.print("V");
    			realRemainingTime += visitedListPenalty;
    			current.isInVisitedList = true;
    			current.remainingTime = realRemainingTime;
    			current.remainingTimeEstimated = realRemainingTime;
	   			/*current.pathQuality -= 100;
	   			realRemainingDist -= 100;
	   			current.remainingDistanceEstimated = realRemainingDist;
    			current.remainingDistance = realRemainingDist;*/
    			posPool.add(current); 
	   		}
    		else if (realRemainingTime - current.remainingTimeEstimated > 0.1)
    		{
    			if (levelScene.verbose > 12) System.out.print("b");
    			// current item is not as good as anticipated. put it back in pool and look for best again
    			current.remainingTimeEstimated = realRemainingTime;
    			posPool.add(current);
    		}
    		else
    		{

    			if (levelScene.verbose > 12) System.out.print("a");
    			//System.out.println("Simulated bestPos accepted! Est remaining time: "
    			//		+current.remainingTimeEstimated+" real: "+ realRemainingTime);
    			currentGood = true;
    			visited((int) current.sceneSnapshot.mario.x, (int) current.sceneSnapshot.mario.y, current.timeElapsed);
    			
    			posPool.addAll(current.generateChildren());    			
    		}
    		if (currentGood) 
    		{
    			bestPosition = current;
    			if (current.sceneSnapshot.mario.x > furthestPosition.sceneSnapshot.mario.x
    					&& !levelScene.level.isGap[(int)(current.sceneSnapshot.mario.x/16)])
    					//&& current.sceneSnapshot.mario.isOnGround())
    				furthestPosition = current;
    		}
    	}
    	if (levelScene.mario.x - currentSearchStartingMarioXPos < maxRight
    			&& furthestPosition.sceneSnapshot.mario.x > bestPosition.sceneSnapshot.mario.x + 20
    			&& (levelScene.mario.fire ||
    					levelScene.level.isGap[(int)(bestPosition.sceneSnapshot.mario.x/16)]))
    	{
    		// Couldnt plan till end of screen, take furthest
    		//System.out.println("Furthest: "+ furthestPosition.sceneSnapshot.mario.x + " best: "+ bestPosition.sceneSnapshot.mario.x);
    		bestPosition = furthestPosition;
    	}
    	
    	//bestPosition = current;
    	if (levelScene.verbose > 1) System.out.println("Search stopped. Remaining pool size: "+ posPool.size() + " Current remaining time: " + current.remainingTime);

    	levelScene = current.sceneSnapshot;
    }
    
    private void startSearch(int repetitions)
    {    	
    	if (levelScene.verbose > 1) System.out.println("Started search.");
    	SearchNode startPos = new SearchNode(null, repetitions, null);
    	startPos.sceneSnapshot = backupState();
    	
    	posPool = new ArrayList<SearchNode>();
    	//visitedStates = new ArrayList<int[]>();
    	visitedStates.clear();
    	posPool.addAll(startPos.generateChildren());
    	currentSearchStartingMarioXPos = levelScene.mario.x; 
    	
    	/*
    	if (bestPosition != null)
    	{
    		LevelScene internal = backupState();
    		// insert old plan
    		SearchNode pos = bestPosition;
    		// rewind
    		int steps = 0;
    		while (pos.parentPos != null)
    		{
    			steps++;
    			pos = pos.parentPos;
    		}
    		if (steps > 3)
    		{
	    		pos = pos.chosenChild.chosenChild.chosenChild;
	    		// go forward
	    		if (pos != null && pos.parentPos != null)
	    		{
		    		pos.parentPos.sceneSnapshot = backupState(); // overwrite previous scenesnapshot
		    		//float previousRemainingTime = pos.remainingTime;
		    		while(pos != null && pos.remainingTime == pos.simulatePos())
		    		{
		    			// same conditions
		    			SearchNode newP = new SearchNode(pos.action, pos.repetitions, pos.parentPos);
		    	    	newP.sceneSnapshot = pos.sceneSnapshot;
		    	    	newP.remainingTime = pos.remainingTime;
		    	    	newP.remainingTimeEstimated = pos.remainingTimeEstimated;
		    	    	posPool.add(newP);
		    	    	//posPool.addAll(newP.generateChildren());
		    	    	pos = pos.chosenChild;
		    	    	
		    	    }
	    		}
	    		restoreState(internal);
    		}
    	}
    	
    	
		for(int i = 0; i < 1000; i++)
		{
			GlobalOptions.Pos[i][0] = 0;
			GlobalOptions.Pos[i][1] = 0;
		}*/
    	debugPos = 0;
    	bestPosition = startPos;
    	furthestPosition = startPos;
    	
    }
    
    private ArrayList<boolean[]> extractPlan()
    {
    	ArrayList<boolean[]> actions = new ArrayList<boolean[]>();
    	
    	// just move forward if no best position exists
    	if (bestPosition == null)
    	{
    		if (levelScene.verbose > 1) System.out.println("NO BESTPOS!");
    		for (int i = 0; i < 10; i++)
    		{
    			actions.add(createAction(false, true, false, false, true));        		
    		}
    		return actions;
    	}
    	if (levelScene.verbose > 2) System.out.print("Extracting plan (reverse order): ");
    	SearchNode current = bestPosition;
    	while (current.parentPos != null)
    	{
    		for (int i = 0; i < current.repetitions; i++)
    			actions.add(0, current.action);
    		if (levelScene.verbose > 2) 
    			System.out.print("[" 
    				+ (current.action[Mario.KEY_DOWN] ? "d" : "") 
    				+ (current.action[Mario.KEY_RIGHT] ? "r" : "")
    				+ (current.action[Mario.KEY_LEFT] ? "l" : "")
    				+ (current.action[Mario.KEY_JUMP] ? "j" : "")
    				+ (current.action[Mario.KEY_SPEED] ? "s" : "") 
    				+ (current.hasBeenHurt ? "-" : "") + "]");
    		if (current.hasBeenHurt)
    		{
    			requireReplanning = true;    			
    		}
    		if (current.parentPos != null)
    			current.parentPos.chosenChild =current;
    		current = current.parentPos;
    	}
    	if (levelScene.verbose > 2) System.out.println();
		return actions;
    }
    
    public String printAction(boolean[] action)
    {
    	String s = "";
    	if (action[Mario.KEY_RIGHT]) s+= "Forward ";
    	if (action[Mario.KEY_LEFT]) s+= "Backward ";
    	if (action[Mario.KEY_SPEED]) s+= "Speed ";
    	if (action[Mario.KEY_JUMP]) s+= "Jump ";
    	if (action[Mario.KEY_DOWN]) s+= "Duck";
    	return s;
    }
    
    private SearchNode pickBestPos(ArrayList<SearchNode> posPool)
    {
    	SearchNode bestPos = null;
    	float bestPosCost = 10000000;
    	//System.out.println("Searching fitnesses.");
    	for (SearchNode current: posPool)
    	{
    		float jumpModifier = 0;    		
    		//if (current.action[Mario.KEY_JUMP]) jumpModifier = -0.0001f;
    		if (current.sceneSnapshot != null)
    		{
    			int marioX = (int) current.sceneSnapshot.mario.x / 16;
    			if (current.sceneSnapshot.level.isGap.length > marioX && current.sceneSnapshot.level.isGap[marioX])
    			{
    				//if (current.action[Mario.KEY_JUMP])
    				//	jumpModifier -= 5f;
    				//if (current.action[Mario.KEY_RIGHT])
        			//	jumpModifier -= 0.5f;
    				//if (current.action[Mario.KEY_SPEED])
        			//	jumpModifier -= 5f;
    			}
    		}
    		
    		//if (current.sceneSnapshot != null && current.sceneSnapshot.mario.y > 200) jumpModifier += 0.001f * (300-current.sceneSnapshot.mario.y);
    		float currentCost = current.getRemainingTime()
    			+ current.timeElapsed * 0.90f + jumpModifier; // slightly bias towards furthest positions 
    		//System.out.println("Looking at pos with elapsed time "+current.timeElapsed+" est time: "
    		//		+ current.getRemainingTime() + " actions: " + printAction(current.action));
    		if (currentCost < bestPosCost)
    		{
    			bestPos = current;
    			bestPosCost = currentCost;
    		}
    	}
    	posPool.remove(bestPos);
    	//System.out.println("Best Pos: elapsed time "+bestPos.timeElapsed+" est time: "
    	//			+ bestPos.getRemainingTime() + " actions: " + printAction(bestPos.action));
    	return bestPos;
    }
        
	public void initialiseSimulator()
	{
		levelScene = new LevelScene();
		levelScene.init();	
		levelScene.level = new Level(1500,15);
	}
	
	public void setLevelPart(byte[][] levelPart, float[] enemies)
	{
    	if (levelScene.setLevelScene(levelPart))
    	{
    		requireReplanning = true;
    	}
    	requireReplanning = levelScene.setEnemies(enemies);
	}
	
	public LevelScene backupState()
	{
		LevelScene sceneCopy = null;
		try
		{
			sceneCopy = (LevelScene) levelScene.clone();
		} catch (CloneNotSupportedException e)
		{
			e.printStackTrace();
		}
		
		return sceneCopy;
	}
	
	
	
	public void restoreState(LevelScene l)
	{
		levelScene = l;
	}
	
	public void advanceStep(boolean[] action)
	{
		levelScene.mario.setKeys(action);
		if (levelScene.verbose > 8) System.out.print("[" 
				+ (action[Mario.KEY_DOWN] ? "d" : "") 
				+ (action[Mario.KEY_RIGHT] ? "r" : "")
				+ (action[Mario.KEY_LEFT] ? "l" : "")
				+ (action[Mario.KEY_JUMP] ? "j" : "")
				+ (action[Mario.KEY_SPEED] ? "s" : "") + "]");
		levelScene.tick();
	}

	/* SEBAS CODE */

	public boolean[] getAction()
	{
        return action;
	}

	public static void updateQtable(float reward)
	{
		float reward_discount = 1;
		while (!recent_actions.isEmpty())
		{
			// add reward value times history discount coefficient
			qtable[recent_actions.get(0)[0]][recent_actions.get(0)[1]] += (reward * reward_discount);

			// remove this action from the list
			recent_actions.remove(0);

			// set discount coefficient for next step
			reward_discount *= gamma;
		}
	}

	public static void updateAction(double[] state, float reward)
	{
		// update qTable
		if (reward != -2500)
		{
			updateQtable(reward);

			// if death state
			if (reward == -1000)
			{
				// ensure recent_actions has been reset
				recent_actions.clear();

				// normalize q table
				float max_val = 0;
				for (int i = 0; i < 9; i++)
				{
					for (int j = 0; j < 12; j++)
					{
						// find largest magnitude in Q-table
						if (abs(qtable[i][j]) > max_val)
						{
							max_val = abs(qtable[i][j]);
						}
					}
				}

				// divide all values by max magnitude
				for (int i = 0; i < 9; i++)
				{
					for (int j = 0; j < 12; j++)
					{
						qtable[i][j] /= max_val;
						qtable[i][j] *= 1000;
					}
				}
			}
		}

		// determine what state current snap matches in qtable
		int current_state = determineState(state);

		// init before max find
		int   best_action = 0;
		float max_action_value = qtable[current_state][0];

		// find action with highest value for state
		for (int i = 1; i < 12; i++)
		{
			if (qtable[current_state][i] > max_action_value)
			{
				best_action = i;
				max_action_value = qtable[current_state][i];
			}
		}

		// update action list
		Integer[] state_action = {current_state, best_action};
		recent_actions.add(0, state_action);

		// update action to new action
		action = possible_actions[best_action];
	}

	/* SEBAS CODE */

	private void visited(int x, int y, int t)
	{
		visitedStates.add(new int[]{x,y,t});
	}
	
	private boolean isInVisited(int x, int y, int t)
	{
		int timeDiff = 5;
		int xDiff = 2;
		int yDiff = 2;
		for(int[] v: visitedStates)
		{
			if (abs(v[0] - x) < xDiff
					&& abs(v[1] - y) < yDiff
					&& abs(v[2] - t) < timeDiff
					&& t >= v[2])
			{
				return true;
			}
		}
		return false;	
		//return visitedStates.contains(new int[]{x,y,t});
	}
}