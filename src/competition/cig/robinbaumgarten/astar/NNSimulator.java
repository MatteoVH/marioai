package competition.cig.robinbaumgarten.astar;

import ch.idsia.mario.engine.sprites.Mario;
import competition.cig.robinbaumgarten.astar.level.Level;
import java.lang.Math;

import java.util.ArrayList;

import static java.lang.Math.abs;
import static java.lang.Math.random;
import static java.lang.Math.sqrt;


public class NNSimulator {

	public LevelScene levelScene;
	public LevelScene workScene;
	public SearchNode bestPosition;
	public SearchNode furthestPosition;
	float currentSearchStartingMarioXPos;
	ArrayList<SearchNode> posPool;
	ArrayList<int[]> visitedStates = new ArrayList<int[]>();
	private float maxMarioSpeed = 10.9090909f;
	private boolean requireReplanning = false;
	public int debugPos = 0;

	public int targetX = 100;
	public int targetY = 100;
	public int timeBudget = 20; // ms
	public static final int visitedListPenalty = 1500;



	/* SEBAS CODE */

	// centroids for game states derived from SOM

	private static double[][] centroids = {
        {0.0, 0.0, 0.0, 0.0, 0.0, -97.28, -97.13, -97.84, -96.72, -96.97, -99.59, -99.75, -97.74, -91.63, -86.83, -65.87, -54.38, -41.12, -31.83, -20.78, -14.59, -6.19, 0.0, 0.0, 0.0, -62.67, -63.78, -65.51, -73.22, -83.49, -86.05, -86.03, -84.99, -78.46, -65.26, -54.7, -46.47, -35.07, -27.33, -17.98, -12.79, -5.32, 0.0, 0.0, 0.0, -31.97, -25.21, -24.06, -24.58, -32.11, -30.52, -29.81, -27.84, -23.11, -13.06, -11.49, -11.97, -12.18, -10.64, -7.75, -4.43, -1.78, 0.0, 0.0, 0.0, -26.99, -21.29, -20.32, -20.76, -27.13, -25.78, -25.18, -23.52, -19.51, -11.04, -9.7, -10.11, -10.29, -8.99, -6.55, -3.74, -1.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.98, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.87, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.13, 3.9, 3.55, 3.51, 3.19, 3.06, 2.91, 2.75, 2.5, 2.27, 2.41, 2.12, 1.76, 1.37, 0.66, 0.38, 0.1, 0.0, 0.0, 0.0, 3.35, 5.71, 1.82, 1.27, 0.62, 0.45, 1.7, 3.41, 5.67, 6.15, 3.48, 2.26, 1.52, 1.26, 0.72, 0.54, 0.22, 0.0, 0.0, 0.0, 0.0, 0.26, 0.0, 0.0, 0.0, 0.0, 0.0, 2.11, 2.48, 1.75, 2.77, 2.11, 1.89, 0.8, 0.21, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.51, 2.33, 4.96, 4.45, 1.16, 0.07, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -52.3, -43.15, -43.39, -38.04, -38.55, -34.47, -39.61, -37.04, -37.81, -32.18, -27.32, -20.68, -14.54, -9.74, -5.25, -2.7, -0.88, 0.0, 0.0, 0.0, -77.22, -68.21, -64.82, -58.15, -55.23, -61.06, -68.41, -82.36, -79.99, -78.83, -56.96, -41.94, -28.4, -20.38, -12.26, -7.76, -2.93, 0.0, 0.0, 0.0, -90.04, -94.21, -94.89, -95.66, -95.26, -96.12, -96.95, -103.93, -97.76, -92.45, -69.18, -57.53, -43.5, -34.1, -22.3, -15.86, -6.76, 0.0, 0.0, 0.0, -105.09, -105.03, -104.99, -104.73, -103.81, -103.31, -102.24, -100.07, -93.82, -88.54, -65.35, -52.72, -38.71, -29.07, -17.59, 0.39, 1.0, 8.4, 4.0, 2078.68},
        {0.0, 0.0, 0.0, 0.0, 0.0, -87.59, -88.62, -87.45, -86.76, -87.88, -87.21, -93.98, -95.29, -93.76, -87.7, -83.03, -60.04, -39.72, -28.28, -20.94, -17.08, -7.72, 0.0, 0.0, 0.0, -19.85, -18.74, -23.15, -32.06, -44.72, -70.06, -80.06, -76.54, -64.05, -53.18, -21.55, -19.13, -20.5, -20.79, -19.92, -16.26, -7.61, 0.0, 0.0, 0.0, -19.85, -18.74, -23.15, -32.06, -44.72, -69.12, -77.72, -70.92, -56.59, -41.03, -7.1, 0.0, 0.0, -1.12, -2.78, -4.43, -2.21, 0.0, 0.0, 0.0, -16.77, -15.83, -19.56, -27.1, -37.79, -58.42, -65.65, -59.88, -47.78, -34.61, -5.98, 0.0, 0.0, -0.95, -2.35, -3.75, -1.87, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.82, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.17, 0.42, 0.99, 0.96, 0.59, 0.0, 0.0, 0.0, 1.08, 11.66, 2.54, 3.02, 3.89, 4.01, 4.6, 6.35, 8.08, 12.7, 13.57, 9.35, 4.31, 1.63, 0.51, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.36, 0.72, 1.63, 1.09, 0.54, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9, 13.63, 18.18, 26.9, 28.54, 18.9, 10.9, 5.63, 3.27, 1.27, 0.36, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.29, -3.2, -7.68, -10.21, -15.96, -16.57, -17.86, -14.65, -7.65, 0.0, 0.0, 0.0, -5.67, -12.3, -18.52, -26.15, -29.3, -36.98, -53.6, -71.43, -105.91, -118.91, -113.41, -84.84, -58.36, -41.35, -31.15, -21.73, -9.95, 0.0, 0.0, 0.0, 2.71, -3.66, -14.07, -22.64, -25.37, -32.02, -46.41, -61.84, -91.73, -103.12, -98.6, -74.36, -51.78, -37.46, -28.65, -20.38, -9.37, 0.0, 0.0, 0.0, -117.94, -117.53, -116.73, -116.25, -115.44, -114.94, -113.76, -111.52, -108.84, -104.58, -98.43, -73.25, -49.79, -34.91, -25.76, 0.54, 1.0, 7.89, 4.55, 1796.88},
		{0.0, 0.0, 0.0, 0.0, 0.0, -86.55, -87.12, -87.36, -91.0, -91.0, -90.58, -88.17, -88.03, -93.03, -95.6, -92.98, -91.05, -87.54, -70.45, -45.43, -27.97, -8.08, 0.0, 0.0, 0.0, -17.65, -18.64, -21.86, -21.75, -21.75, -24.23, -42.78, -69.75, -79.6, -79.14, -74.7, -56.15, -29.27, -12.22, -7.29, 0.0, -1.24, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.48, -21.03, -48.09, -65.16, -69.92, -74.7, -56.15, -29.27, -12.22, -7.29, 0.0, -1.24, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.1, -17.79, -40.66, -55.06, -59.06, -63.08, -47.39, -24.7, -10.31, -6.15, 0.0, -1.05, 0.0, 0.0, 0.0, 0.0, 0.29, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.57, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.52, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.59, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.78, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.38, 3.23, 7.54, 11.1, 9.92, 7.28, 4.4, 1.19, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.14, 0.0, 0.0, 1.33, 2.28, 4.0, 4.0, 2.66, 1.71, 0.4, 6.07, 14.57, 19.83, 16.19, 10.92, 6.88, 2.02, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -29.52, -27.62, -15.2, -8.1, 5.14, 6.09, 6.45, 3.64, -2.86, -24.27, -55.52, -74.42, -79.41, -69.68, -44.68, -31.17, -8.5, 0.0, 0.0, 0.0, -76.04, -45.77, -19.67, -7.96, 5.73, 3.14, 1.92, 0.0, -12.48, -38.0, -67.97, -75.64, -66.46, -58.25, -37.64, -26.98, -7.36, 0.0, 0.0, 0.0, -109.96, -111.74, -115.22, -115.79, -119.0, -119.0, -119.0, -119.0, -118.79, -116.65, -113.96, -109.31, -107.35, -85.59, -57.27, 0.1, 1.0, 8.04, 10.63, 1684.29},
		{0.0, 0.0, 0.0, 0.0, 0.0, -86.14, -87.0, -86.96, -89.87, -88.7, -89.89, -89.42, -88.89, -89.82, -89.26, -90.49, -88.66, -83.7, -69.0, -45.94, -33.61, -15.09, 0.0, 0.0, 0.0, -19.16, -16.8, -25.27, -31.2, -41.96, -43.14, -44.27, -44.38, -45.48, -44.33, -40.7, -41.89, -33.5, -25.06, -13.14, -14.38, -7.19, 0.0, 0.0, 0.0, -16.18, -14.19, -21.37, -26.37, -35.45, -36.45, -37.39, -37.49, -39.53, -40.05, -37.73, -40.03, -33.5, -25.06, -13.14, -14.38, -7.19, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -6.14, -14.26, -18.26, -25.38, -28.3, -21.16, -11.1, -12.14, -6.07, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.27, 2.97, 1.86, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -64.92, -51.14, -44.18, -31.75, -22.07, -13.73, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -90.85, -83.04, -76.9, -57.82, -46.8, -40.9, -33.3, -32.09, -45.38, -57.34, -58.13, -63.06, -42.06, -29.18, -12.03, -7.3, -1.96, 0.0, 0.0, 0.0, -86.2, -77.83, -71.69, -53.73, -43.07, -36.99, -28.83, -31.2, -42.03, -58.69, -69.78, -81.25, -74.09, -57.67, -28.33, -17.99, -7.91, 0.0, 0.0, 0.0, -106.52, -107.28, -107.49, -110.28, -113.05, -113.66, -116.1, -114.98, -113.96, -112.05, -110.75, -108.96, -100.54, -90.75, -69.0, 0.22, 1.0, 9.0, 5.38, 1125.9},
		{0.0, 0.0, 0.0, 0.0, 0.0, -92.69, -90.19, -89.03, -89.2, -89.05, -90.45, -89.61, -90.76, -90.16, -90.96, -89.97, -90.72, -90.16, -80.97, -63.32, -49.91, -22.88, 0.0, 0.0, 0.0, -35.6, -35.1, -34.45, -35.35, -36.99, -38.74, -44.75, -47.14, -48.44, -47.11, -48.46, -49.6, -48.44, -40.9, -34.81, -31.03, -13.66, 0.0, 0.0, 0.0, 0.0, -3.76, -12.5, -18.68, -28.64, -33.56, -44.75, -47.14, -48.44, -47.11, -48.46, -49.6, -48.44, -40.9, -34.23, -29.68, -12.69, 0.0, 0.0, 0.0, 0.0, -3.19, -10.57, -15.79, -24.21, -28.35, -37.81, -39.81, -40.92, -39.79, -40.94, -41.88, -40.92, -34.54, -26.23, -16.43, -6.27, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.72, 1.3, 1.15, 0.86, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.51, 4.59, 3.77, 4.72, 3.51, 4.59, 3.77, 5.3, 5.19, 6.27, 5.39, 4.24, 4.04, 2.69, 2.69, 1.54, 0.77, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.42, 1.0, 0.66, 0.0, 0.0, 0.0, 0.0, 3.68, 5.32, 8.19, 8.6, 9.42, 9.42, 7.78, 5.73, 4.09, 1.63, 0.0, 0.0, 0.0, 3.54, 2.54, 1.62, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -55.31, -67.81, -74.41, -89.0, -96.13, -107.63, -111.87, -119.07, -119.0, -119.0, -119.0, -119.0, -118.97, -101.72, -73.09, -53.0, -21.5, 0.0, 0.0, 0.0, -111.94, -110.91, -109.46, -108.57, -106.93, -105.9, -104.47, -103.85, -103.0, -103.0, -103.0, -103.0, -102.97, -88.03, -63.26, -45.87, -18.61, 0.0, 0.0, 0.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -102.97, -88.03, -63.26, -45.87, -18.61, 0.0, 0.0, 0.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -102.93, -91.81, -73.54, 0.9, 1.0, 9.0, 4.56, 809.9},
		{0.0, 0.0, 0.0, 0.0, 0.0, -88.97, -89.71, -90.67, -82.49, -100.78, -100.8, -102.74, -102.38, -102.05, -101.91, -101.37, -100.59, -100.03, -99.17, -32.7, -16.92, -5.11, 0.0, 0.0, 0.0, -20.34, -25.31, -30.04, -79.0, -81.63, -87.06, -86.54, -85.63, -83.83, -82.04, -81.11, -78.39, -74.35, -71.18, -17.1, -7.52, -1.93, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.54, -0.81, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.27, -0.44, 0.24, 0.68, 0.68, 1.11, 0.83, 7.11, 0.74, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03, 0.0, 0.0, 0.0, 0.0, 2.2, 4.79, 1.61, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.35, 0.9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.1, 0.9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.3, 0.68, 0.93, 0.88, 0.75, 0.56, 0.27, 0.0, 0.0, 0.0, 13.09, 12.26, 11.35, 10.48, 1.57, 0.99, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.42, 0.86, 1.03, 1.23, 1.57, 1.5, 6.59, 7.29, 1.89, 1.6, 1.13, 1.17, 6.16, 6.48, 0.81, 0.45, 0.0, 0.0, 0.0, 0.0, 1.08, 2.18, 2.61, 3.14, 3.97, 3.78, 17.03, 18.03, 4.79, 4.0, 2.88, 2.95, 15.95, 15.98, 2.05, 1.11, 0.0, 0.0, 0.0, 0.0, 1.08, 2.18, 2.61, 3.14, 3.97, 3.78, 17.03, 17.41, 2.93, -0.34, -3.93, -5.08, 4.2, -1.33, -12.47, -9.38, -4.63, 0.0, 0.0, 0.0, -119.0, -119.0, -119.0, -119.0, -119.0, -119.0, -119.0, -118.99, -118.9, -118.71, -118.38, -118.07, -117.87, -117.34, -39.8, -20.7, -6.24, 0.0, 0.0, 0.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -35.76, -18.95, -5.88, 0.0, 0.0, 0.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -33.15, 0.06, 1.0, 6.09, 0.08, 548.91},
		{0.0, 0.0, 0.0, 0.0, 0.0, -95.32, -97.08, -97.26, -92.1, -85.32, -72.41, -52.33, -26.85, -8.33, -1.13, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -68.8, -68.94, -68.41, -74.2, -64.9, -52.97, -35.02, -19.24, -5.67, -3.42, -2.26, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -48.21, -52.19, -49.38, -37.42, -26.67, -13.38, -2.69, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -40.73, -44.08, -41.69, -31.6, -22.51, -11.3, -2.28, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.59, 6.25, 4.96, 4.33, 2.96, 2.27, 0.89, 0.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.46, 4.75, 3.09, 2.75, 3.15, 3.09, 2.87, 2.46, 1.57, 1.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.88, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.44, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.32, 6.18, 5.74, 3.97, 1.76, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -54.12, -57.17, -58.69, -50.98, -41.71, -30.91, -32.62, -17.03, -1.56, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -96.65, -102.42, -99.39, -95.51, -85.9, -74.84, -59.64, -41.36, -23.16, -13.91, -6.19, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -89.64, -94.95, -96.77, -100.6, -91.2, -80.56, -59.69, -37.46, -20.07, -12.04, -5.36, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -105.26, -104.98, -104.23, -101.16, -89.29, -77.99, -57.15, -34.91, -16.85, -8.51, -1.56, 4.0, 4.0, 4.0, 4.0, 0.48, 1.0, 8.51, 4.15, 2041.32},
		{0.0, 0.0, 0.0, 0.0, 0.0, -92.96, -92.62, -91.83, -90.79, -90.54, -88.66, -85.05, -86.11, -87.77, -94.05, -81.18, -64.48, -42.47, -35.83, -20.53, -15.33, -8.24, 0.0, 0.0, 0.0, -43.48, -38.79, -31.42, -26.78, -21.27, -19.33, -23.38, -32.49, -51.72, -57.04, -52.69, -39.5, -25.27, -20.85, -18.69, -16.44, -6.57, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -13.28, -29.75, -51.72, -57.04, -52.69, -39.5, -25.27, -20.85, -18.69, -16.44, -6.57, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -11.24, -25.15, -43.72, -48.19, -44.52, -33.38, -21.36, -17.61, -15.79, -13.89, -5.55, 0.0, 0.0, 0.0, 0.0, 0.26, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.65, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.72, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.34, 0.51, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.57, 3.91, 4.42, 3.91, 3.57, 1.87, 0.51, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.36, 0.72, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -9.87, 0.4, 7.34, 10.39, 6.85, 2.52, 1.46, 1.22, 0.91, -14.03, -17.13, -21.73, -4.99, -7.66, -5.11, -7.64, -5.08, 0.0, 0.0, 0.0, -56.33, -31.43, -8.9, -6.59, -6.81, -6.44, -11.6, -19.68, -11.6, -13.71, -11.52, -16.79, -4.14, -6.64, -4.43, -6.62, -4.4, 0.0, 0.0, 0.0, -113.66, -114.49, -117.88, -117.37, -117.92, -117.81, -118.41, -116.92, -117.41, -118.18, -102.98, -80.68, -53.49, -42.98, -23.4, 0.12, 1.0, 8.52, 8.19, 1684.71},
		{0.0, 0.0, 0.0, 0.0, 0.0, -87.86, -89.5, -88.87, -88.94, -87.28, -87.37, -88.98, -89.05, -94.04, -92.96, -87.5, -77.41, -57.15, -43.65, -31.5, -22.9, -11.41, 0.0, 0.0, 0.0, -30.59, -28.88, -30.53, -26.24, -29.43, -32.54, -38.61, -53.12, -55.91, -58.37, -54.43, -51.27, -31.19, -23.45, -16.72, -12.44, -5.74, 0.0, 0.0, 0.0, -30.59, -28.88, -30.53, -24.31, -23.16, -18.1, -20.4, -30.12, -30.55, -27.71, -21.44, -13.48, -1.13, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -25.84, -24.4, -25.79, -20.53, -19.56, -15.29, -17.24, -25.46, -25.8, -23.41, -18.1, -11.37, -0.95, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.35, 1.14, 2.63, 3.34, 3.86, 3.51, 2.54, 1.93, 1.49, 1.14, 0.52, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -36.6, -39.85, -28.8, -32.74, -34.66, -39.25, -36.55, -33.94, -32.88, -33.78, -35.86, -35.24, -29.12, -22.35, -15.33, -9.77, -5.35, 0.0, 0.0, 0.0, -57.17, -62.65, -54.97, -54.49, -52.17, -50.97, -47.31, -48.39, -63.35, -64.17, -59.87, -51.63, -34.99, -29.5, -20.16, -12.98, -5.98, 0.0, 0.0, 0.0, -111.79, -111.99, -112.13, -112.36, -111.76, -112.64, -112.54, -113.76, -112.29, -111.03, -107.35, -104.57, -86.56, -65.16, -44.04, 0.32, 1.0, 9.0, 1.65, 1388.75},
		{0.0, 0.0, 0.0, 0.0, 0.0, -86.0, -88.09, -86.67, -92.34, -89.34, -91.25, -92.09, -91.25, -90.0, -91.92, -90.67, -68.42, -21.75, -8.63, -12.88, -8.59, 0.0, 0.0, 0.0, 0.0, -23.84, -24.38, -34.5, -34.34, -51.67, -60.05, -55.84, -55.67, -55.96, -59.96, -51.5, -29.96, 0.0, -13.0, -12.88, -8.59, 0.0, 0.0, 0.0, 0.0, -13.0, -17.21, -34.5, -34.34, -51.67, -60.05, -55.84, -55.67, -55.96, -59.96, -51.5, -29.96, 0.0, -11.0, -10.88, -7.25, 0.0, 0.0, 0.0, 0.0, -11.0, -14.55, -29.17, -29.0, -43.67, -50.71, -47.17, -47.0, -47.3, -50.63, -43.5, -25.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.41, 5.75, 3.54, 5.5, 4.2, 5.08, 4.0, 4.0, 5.33, 3.33, 5.33, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.91, 9.91, 12.75, 14.16, 7.08, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -84.34, -104.3, -109.13, -119.09, -119.0, -119.0, -119.0, -119.0, -119.0, -119.0, -119.0, -89.13, -14.84, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -108.25, -107.34, -104.92, -104.17, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -77.13, -12.84, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -77.13, -12.84, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -76.0, -24.67, -11.38, -11.38, 1.0, 1.0, 9.0, 1.79, 852.7},
		{0.0, 0.0, 0.0, 0.0, 0.0, -103.0, -103.0, -103.0, -103.0, -100.43, -95.58, -93.58, -88.72, -86.72, -87.0, -87.0, -87.0, -87.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -87.0, -87.0, -87.0, -87.0, -86.86, -74.29, -49.58, -37.0, -12.29, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.14, 3.42, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.42, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 8.28, 9.85, 12.85, 9.85, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.42, 4.42, 4.57, 4.42, 4.57, 1.57, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.71, 11.28, 11.42, 11.28, 11.42, 3.85, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.71, 11.28, 11.42, 11.28, 11.42, 3.85, -17.15, -51.29, -68.15, -102.29, -119.15, -119.0, -119.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -119.0, -119.0, -119.0, -119.0, -119.0, -119.0, -118.72, -116.15, -111.86, -109.29, -105.0, -103.0, -103.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, 4.0, 4.0, 0.0, 1.0, 8.57, 12.71, 691.28},
		{0.0, 0.0, 0.0, 0.0, 0.0, -86.56, -87.59, -85.34, -99.95, -100.38, -100.52, -103.0, -103.0, -102.96, -102.87, -102.57, -102.42, -67.12, -2.47, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -20.07, -35.02, -74.3, -76.96, -80.69, -87.08, -87.0, -87.0, -87.0, -86.78, -86.33, -84.8, -54.75, -1.74, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09, 1.02, 4.08, 2.85, 5.31, 2.28, 0.87, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 8.75, 1.19, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25, 5.16, 0.88, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.33, 0.94, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.26, 12.33, 9.59, 2.37, 1.81, 0.92, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.23, 0.29, 0.84, 2.01, 3.06, 6.44, 5.51, 1.11, 2.04, 2.81, 3.04, 6.36, 4.93, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.59, 0.73, 2.17, 5.11, 7.78, 16.48, 13.61, 2.8, 5.22, 7.08, 7.71, 16.28, 12.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.59, 0.73, 2.17, 5.11, 7.78, 16.48, 13.61, 2.8, 5.22, 7.08, 7.41, 15.37, 9.09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -119.0, -119.0, -119.0, -119.0, -119.0, -119.0, -119.0, -119.0, -119.0, -119.0, -119.0, -118.95, -78.98, -3.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -68.5, -2.86, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -67.16, 1.03, 4.0, 0.22, 1.0, 6.15, 3.02, 549.8},
		{0.0, 0.0, 0.0, 0.0, 0.0, -88.54, -87.87, -87.43, -77.08, -70.35, -69.39, -67.83, -46.04, -22.58, -0.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -20.65, -21.88, -23.76, -48.4, -61.16, -67.17, -64.61, -45.24, -12.25, -0.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -14.64, -14.35, -15.53, -41.49, -57.22, -64.89, -63.6, -44.99, -12.25, -0.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -12.36, -12.12, -13.12, -35.09, -48.36, -54.83, -53.72, -37.98, -10.34, -0.26, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.28, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.23, 3.2, 0.68, 0.5, 0.13, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.93, 11.47, 2.51, 2.28, 1.88, 1.48, 1.2, 2.43, 2.02, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.29, 3.0, 0.49, 0.29, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.57, 1.47, 1.57, 1.18, 0.19, 0.0, 0.19, 5.12, 4.13, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -6.91, -6.91, -8.29, -7.6, -3.12, -1.04, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -22.67, -27.84, -31.31, -31.8, -20.8, -15.45, -42.36, -42.64, -27.36, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -15.17, -23.35, -28.32, -28.93, -18.23, -13.46, -36.7, -36.93, -23.7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -115.53, -115.32, -114.84, -109.6, -94.59, -86.5, -79.37, -52.72, -23.43, 3.64, 4.0, 4.0, 4.0, 4.0, 4.0, 0.45, 1.0, 7.2, 4.13, 1835.63},
		{0.0, 0.0, 0.0, 0.0, 0.0, -100.06, -98.06, -97.24, -93.12, -89.36, -86.65, -87.0, -87.0, -84.89, -87.83, -75.59, -72.48, -50.0, -16.18, -6.06, 0.0, 0.0, 0.0, 0.0, 0.0, -76.71, -71.53, -61.36, -56.06, -35.59, -15.18, 0.0, 0.0, -12.24, -18.24, -18.3, -18.24, -18.3, -18.24, -6.06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -12.24, -18.24, -18.3, -18.24, -18.3, -18.24, -6.06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -10.36, -15.42, -15.48, -15.42, -15.48, -15.42, -5.12, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.35, 11.29, 10.35, 6.58, 2.82, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 14.0, 7.17, 1.88, 1.82, 1.88, 3.0, 4.94, 4.35, 1.94, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -14.12, -20.95, -21.06, -17.89, -30.48, -51.36, -44.24, -13.12, 12.47, 10.94, 4.76, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -118.77, -116.77, -117.71, -116.77, -117.48, -114.3, -114.42, -115.83, -119.0, -119.0, -104.53, -97.3, -68.36, -17.71, -3.24, 0.0, 1.0, 9.0, 5.17, 1657.88},
		{0.0, 0.0, 0.0, 0.0, 0.0, -88.8, -92.7, -88.13, -88.7, -84.95, -92.95, -95.52, -89.77, -82.59, -63.77, -60.31, -21.31, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -39.75, -39.59, -46.67, -40.65, -60.67, -56.75, -56.59, -53.57, -48.11, -27.11, -22.29, -6.7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -39.75, -39.59, -42.16, -31.67, -44.98, -34.36, -34.29, -29.0, -23.57, -2.62, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -33.59, -33.44, -35.59, -26.75, -38.0, -29.03, -28.95, -24.49, -19.88, -2.21, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.82, 1.64, 2.87, 4.1, 3.28, 2.87, 1.23, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -21.44, -30.59, -30.52, -33.54, -27.42, -21.29, -13.47, -21.08, -29.26, -40.67, -43.16, -21.42, -3.08, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -49.16, -72.36, -68.98, -59.52, -51.11, -55.24, -52.8, -54.8, -56.36, -42.77, -45.77, -21.62, -2.67, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -114.18, -111.57, -108.85, -111.21, -111.98, -113.93, -112.08, -113.26, -111.42, -107.88, -96.98, -41.11, -5.42, 4.0, 4.0, 0.2, 1.0, 9.0, 2.69, 1407.05},
		{0.0, 0.0, 0.0, 0.0, 0.0, -92.03, -92.91, -92.27, -90.22, -88.1, -87.69, -87.4, -87.52, -88.61, -89.18, -89.47, -66.55, -50.55, -37.3, -28.8, -19.96, -9.7, 0.0, 0.0, 0.0, -69.09, -60.18, -46.41, -37.54, -28.88, -25.05, -21.41, -31.52, -41.5, -50.36, -54.02, -55.29, -42.68, -35.15, -18.81, -12.5, -3.75, 0.0, 0.0, 0.0, -68.9, -59.98, -46.21, -37.54, -27.91, -23.49, -18.68, -26.83, -35.07, -42.55, -45.63, -46.7, -36.04, -29.88, -16.08, -10.75, -3.16, 0.0, 0.0, 0.0, -57.3, -49.75, -38.14, -31.69, -19.03, -12.63, -3.16, -1.05, 0.0, 0.0, 0.0, 0.0, 0.0, -1.08, -1.07, -1.07, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.7, 4.87, 6.04, 5.26, 5.85, 4.68, 5.26, 3.31, 2.34, 0.58, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.04, 4.97, 1.24, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -117.55, -117.55, -117.49, -110.26, -105.87, -97.11, -82.61, -69.52, -52.18, -43.4, -24.6, -11.53, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -101.75, -101.75, -103.15, -96.88, -93.08, -85.49, -72.94, -61.59, -52.47, -49.19, -41.68, -28.96, -18.97, -20.42, -18.91, -18.93, -11.64, 0.0, 0.0, 0.0, -101.75, -101.75, -102.96, -96.69, -92.88, -85.3, -72.75, -61.4, -51.49, -47.63, -38.94, -26.42, -16.43, -17.69, -17.83, -17.85, -10.08, 0.0, 0.0, 0.0, -103.2, -103.2, -103.05, -103.91, -104.42, -105.49, -107.47, -109.13, -111.71, -111.81, -110.83, -84.94, -62.33, -45.64, -31.46, 0.78, 1.0, 9.0, 0.6, 995.04},
		{0.0, 0.0, 0.0, 0.0, 0.0, -103.0, -103.0, -103.0, -95.8, -93.0, -86.2, -87.0, -87.0, -87.0, -87.0, -87.0, -87.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -87.0, -87.0, -87.0, -86.6, -52.0, -34.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.8, 4.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.4, 10.6, 18.0, 9.6, 6.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.4, 6.2, 4.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 15.8, 10.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 15.8, 10.8, 0.0, 0.0, -48.0, -71.6, -119.4, -119.0, -119.0, -119.0, -119.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -119.0, -119.0, -119.0, -119.0, -119.0, -118.2, -112.2, -108.6, -103.0, -103.0, -103.0, -103.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, 4.0, 4.0, 4.0, 0.4, 1.0, 9.0, 12.4, 722.0},
		{0.0, 0.0, 0.0, 0.0, 0.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -102.34, -101.08, -98.56, -96.86, -95.08, -88.63, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -87.0, -87.0, -87.0, -87.0, -87.0, -87.0, -86.97, -83.71, -77.19, -64.34, -54.67, -44.75, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.88, 1.33, 2.22, 4.0, 3.55, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.18, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.81, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.77, 2.14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.33, 4.92, 5.92, 2.77, 2.29, 2.74, 2.33, 4.92, 5.55, 1.62, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.88, 12.62, 14.81, 6.92, 5.85, 6.88, 5.88, 12.62, 13.85, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.88, 12.62, 14.81, 6.92, 5.85, 6.88, 5.88, 12.62, 9.4, -9.3, -31.0, -44.19, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -119.0, -119.0, -119.0, -119.0, -119.0, -119.0, -119.0, -119.0, -118.93, -118.26, -116.93, -114.63, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, 4.0, 4.0, 4.0, 0.11, 1.0, 7.4, 9.59, 627.77},
		{0.0, 0.0, 0.0, 0.0, 0.0, -96.16, -95.33, -94.68, -85.68, -75.3, -66.54, -59.56, -53.04, -42.95, -31.19, -19.7, -9.85, -1.65, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -64.01, -60.64, -51.67, -44.98, -30.28, -22.03, -10.64, -7.34, -3.27, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.39, 7.54, 7.09, 4.98, 3.77, 1.96, 1.35, 0.6, 0.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -5.94, 0.21, 4.33, 4.71, 3.88, 3.31, 2.28, 2.27, 1.88, 1.75, 0.91, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -27.64, -24.15, -22.5, -19.12, -22.31, -26.41, -24.48, -15.92, -3.12, 1.11, 2.27, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -116.1, -115.74, -117.1, -107.38, -95.79, -84.77, -76.43, -67.82, -55.76, -39.74, -23.85, -9.93, 1.67, 4.0, 4.0, 0.16, 1.0, 9.0, 7.62, 1663.16},
		{0.0, 0.0, 0.0, 0.0, 0.0, -89.82, -89.55, -85.71, -87.38, -86.84, -84.73, -91.49, -91.84, -88.06, -55.41, -8.36, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -30.52, -19.46, -21.3, -7.09, -14.19, -37.9, -49.52, -56.52, -61.19, -42.33, -9.41, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -30.52, -19.46, -16.55, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -25.76, -16.44, -13.95, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.86, 1.29, 2.59, 6.91, 4.32, 1.29, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -19.38, -51.73, -67.68, -77.22, -77.22, -86.87, -78.33, -64.82, -47.71, -27.55, 1.83, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -52.06, -67.3, -77.73, -66.84, -66.84, -75.19, -69.36, -58.49, -44.46, -27.82, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -112.57, -112.79, -108.9, -109.65, -109.33, -108.68, -108.03, -111.92, -111.92, -74.73, -9.3, 4.0, 4.0, 4.0, 4.0, 0.48, 1.0, 9.0, 2.4, 1480.78},
		{0.0, 0.0, 0.0, 0.0, 0.0, -91.8, -93.06, -90.95, -88.9, -82.79, -81.74, -74.36, -68.52, -62.27, -49.16, -29.0, -23.43, -17.39, -11.98, -9.26, -6.61, -2.65, 0.0, 0.0, 0.0, -62.13, -59.33, -48.74, -38.22, -34.36, -27.75, -27.74, -33.04, -26.31, -10.56, 0.0, 0.0, -2.67, -10.66, -10.61, -6.61, -2.65, 0.0, 0.0, 0.0, -57.0, -53.79, -43.2, -33.92, -29.24, -23.44, -23.43, -27.92, -22.21, -8.92, 0.0, 0.0, -2.67, -10.66, -10.61, -6.61, -2.65, 0.0, 0.0, 0.0, -24.52, -19.98, -11.13, -8.88, -1.11, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.26, -9.02, -8.97, -5.58, -2.24, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.66, 2.87, 4.1, 2.87, 2.87, 0.61, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -77.79, -74.71, -68.53, -53.36, -44.22, -34.99, -15.22, -6.06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -67.33, -67.74, -77.74, -73.72, -76.5, -71.49, -57.42, -52.45, -46.48, -26.76, 2.41, 4.35, 1.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -67.33, -67.33, -75.27, -70.03, -71.38, -65.95, -51.47, -46.09, -40.99, -27.68, -3.95, 0.0, 0.0, -1.54, -7.7, -7.66, -3.06, 0.0, 0.0, 0.0, -108.49, -108.8, -108.85, -109.13, -104.4, -97.86, -89.16, -83.8, -78.02, -61.44, -36.36, -29.12, -21.24, -14.9, -8.49, 0.53, 1.0, 9.0, 6.05, 1071.44},
		{0.0, 0.0, 0.0, 0.0, 0.0, -89.32, -88.58, -86.79, -85.85, -87.64, -90.27, -88.27, -92.58, -92.48, -67.16, -19.16, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -22.79, -13.69, -14.58, -20.9, -27.22, -32.58, -54.43, -65.11, -70.48, -43.32, -5.43, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -5.48, -16.37, -27.22, -32.58, -54.43, -65.11, -70.48, -43.32, -5.43, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.64, -13.85, -23.0, -27.53, -46.0, -55.0, -59.53, -36.58, -4.58, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.63, 0.63, 0.63, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.47, 6.94, 6.42, 7.26, 5.57, 4.47, 3.63, 2.78, 2.52, 3.36, 0.84, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.57, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.78, 5.36, 8.94, 1.78, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.42, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -73.85, -87.79, -100.32, -106.53, -112.79, -119.06, -119.0, -119.0, -119.0, -87.69, -25.06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -110.37, -108.69, -107.0, -105.43, -104.58, -103.74, -103.0, -103.0, -103.0, -75.9, -21.69, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -75.9, -21.69, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -74.85, -18.53, 4.0, 4.0, 4.0, 4.0, 1.0, 1.0, 9.0, 3.05, 823.73},
		{0.0, 0.0, 0.0, 0.0, 0.0, -103.0, -103.0, -103.0, -101.0, -99.23, -95.45, -93.89, -86.12, -87.0, -87.0, -87.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -87.0, -87.0, -87.0, -86.89, -77.23, -67.45, -48.23, -38.23, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.33, 2.66, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.33, 2.66, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.33, 4.11, 8.22, 7.66, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.33, 3.44, 3.55, 5.66, 4.88, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.88, 8.77, 8.88, 14.55, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.88, 8.77, 8.88, 14.55, 12.0, -13.34, -26.56, -53.12, -66.23, -119.45, -119.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -119.0, -119.0, -119.0, -119.0, -119.0, -118.78, -117.0, -115.0, -111.67, -109.23, -103.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, 4.0, 4.0, 4.0, 4.0, 0.11, 1.0, 8.55, 13.0, 695.77},
		{0.0, 0.0, 0.0, 0.0, 0.0, -81.84, -99.14, -99.0, -97.66, -99.95, -101.27, -103.0, -103.0, -102.61, -102.59, -91.71, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -66.88, -66.69, -67.97, -76.95, -82.63, -87.06, -87.0, -87.0, -86.98, -85.1, -76.46, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.13, 0.17, 1.0, 1.75, 6.13, 2.0, 2.74, 0.61, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.36, 0.82, 6.02, 2.18, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.18, 8.48, 2.37, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.56, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.97, 3.79, 3.73, 3.44, 1.75, 0.64, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.66, 1.04, 1.67, 6.51, 5.87, 0.46, 1.84, 2.82, 2.91, 7.07, 5.62, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.71, 2.62, 4.3, 16.73, 14.45, 1.16, 4.76, 7.09, 7.4, 18.11, 13.79, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.71, 2.62, 4.3, 16.73, 14.45, 1.16, 4.76, 7.09, 7.4, 18.11, 11.16, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -119.0, -119.0, -119.0, -119.0, -119.0, -119.0, -119.0, -119.0, -119.0, -119.0, -107.67, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -93.23, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -103.0, -92.85, 4.0, 4.0, 4.0, 4.0, 0.2, 1.0, 6.35, 5.7, 569.75},
		{0.0, 0.0, 0.0, 0.0, 0.0, -81.68, -81.87, -78.06, -61.39, -44.56, -30.0, -16.87, -3.62, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -48.7, -56.99, -72.12, -60.24, -40.12, -25.02, -11.7, -3.33, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.15, 4.92, 6.15, 6.46, 4.92, 3.38, 1.84, 0.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -66.64, -57.06, -32.6, -15.58, 4.57, 3.26, 1.96, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -59.37, -53.33, -35.56, -19.7, -2.31, -2.31, -4.62, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -109.89, -110.62, -113.27, -82.81, -55.1, -33.81, -17.22, -0.74, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.38, 1.0, 9.0, 7.23, 1576.07},
		{0.0, 0.0, 0.0, 0.0, 0.0, -86.67, -84.72, -80.76, -67.21, -51.15, -35.82, -23.19, -13.5, -2.75, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -37.25, -36.5, -42.92, -35.45, -33.44, -24.54, -21.18, -12.71, -2.15, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -37.25, -36.5, -42.92, -33.62, -28.57, -17.87, -15.73, -7.86, -2.15, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -31.47, -30.84, -36.25, -28.39, -24.12, -15.09, -13.29, -6.64, -1.82, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.22, 0.44, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -21.58, -19.96, -16.91, -22.96, -21.49, -18.19, -10.75, -9.73, -3.33, -4.17, -1.67, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -49.03, -53.5, -53.03, -54.0, -46.64, -33.91, -21.66, -16.91, -5.37, -3.62, -1.45, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -113.1, -113.6, -112.53, -101.13, -81.29, -66.07, -51.23, -37.39, -15.16, -5.33, 0.61, 4.0, 4.0, 4.0, 4.0, 0.5, 1.0, 9.0, 5.38, 1388.01},
		{0.0, 0.0, 0.0, 0.0, 0.0, -89.22, -90.07, -88.06, -77.6, -58.6, -48.09, -39.19, -28.55, -20.44, -11.05, -5.94, -2.6, -1.42, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -45.81, -35.94, -36.67, -25.39, -20.45, -13.41, -9.14, -6.38, -5.67, -4.27, -2.84, -3.56, -1.42, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -39.89, -31.34, -31.52, -21.66, -17.27, -11.33, -7.72, -6.05, -5.67, -4.27, -2.84, -3.56, -1.42, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -6.55, -5.34, -2.97, -1.18, 0.0, 0.0, 0.0, -3.62, -4.79, -3.61, -2.4, -3.01, -1.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.53, 1.2, 1.2, 0.76, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.16, 1.39, 1.39, 0.93, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -42.31, -32.57, -27.66, -17.09, -4.07, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -79.11, -76.28, -77.77, -61.2, -41.03, -29.29, -20.4, -9.77, -1.51, 1.16, 0.23, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -73.41, -69.81, -70.53, -54.95, -35.98, -25.34, -17.66, -11.27, -7.64, -1.65, -1.65, -0.83, -1.65, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -109.07, -108.66, -109.07, -94.7, -72.79, -58.74, -48.55, -35.66, -24.02, -11.98, -4.4, -0.2, 2.34, 4.0, 4.0, 0.39, 1.0, 9.0, 8.52, 1146.3},
		{0.0, 0.0, 0.0, 0.0, 0.0, -91.74, -92.11, -91.47, -86.72, -64.7, -47.83, -33.22, -21.59, -8.34, -2.79, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -47.96, -48.66, -50.15, -46.7, -32.89, -23.03, -14.0, -8.21, -0.82, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -17.39, -22.3, -31.39, -32.14, -28.04, -23.03, -14.0, -8.21, -0.82, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -14.7, -18.84, -26.52, -27.15, -23.68, -19.45, -11.83, -6.93, -0.69, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.28, 0.09, 0.19, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.48, 0.96, 0.67, 0.86, 0.09, 0.0, 0.0, 0.0, 0.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.76, 3.43, 2.46, 3.47, 2.97, 3.56, 2.72, 1.28, 0.64, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.93, 0.83, 0.68, 0.33, 0.08, 0.0, 0.0, 3.26, 1.63, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.34, 2.11, 1.71, 0.84, 0.21, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -65.28, -75.08, -81.16, -87.77, -73.12, -61.91, -43.8, -28.56, -11.42, -3.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -110.36, -109.76, -108.54, -101.56, -75.21, -54.85, -37.91, -24.72, -9.89, -3.29, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -103.0, -103.0, -103.0, -97.24, -73.34, -54.39, -37.91, -24.72, -9.89, -3.29, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -103.0, -103.0, -103.0, -97.01, -72.19, -52.5, -35.38, -21.68, -6.26, 0.59, 4.0, 4.0, 4.0, 4.0, 4.0, 0.61, 1.0, 8.96, 6.22, 830.71},
		{0.0, 0.0, 0.0, 0.0, 0.0, -94.23, -91.75, -89.99, -88.55, -80.96, -63.21, -49.56, -34.75, -17.73, -5.64, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -74.16, -76.53, -78.16, -74.88, -61.92, -39.27, -12.03, -2.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.11, 0.66, 1.0, 0.66, 0.66, 1.71, 2.08, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.11, 0.55, 0.77, 2.77, 0.22, 0.0, 0.0, 0.0, 0.23, 0.92, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.69, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.23, 0.46, 0.0, 0.0, 0.58, 1.02, 2.05, 1.27, 0.83, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.11, 2.37, 1.92, 1.03, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.78, 4.42, 3.87, 2.12, 1.66, 0.69, 0.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.91, 13.44, 11.53, 6.33, 4.18, 1.73, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.08, 11.24, 9.64, 2.05, -2.46, -12.66, -27.16, -38.74, -24.28, -7.72, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -119.0, -119.0, -119.0, -114.54, -98.67, -80.52, -63.97, -44.53, -21.5, -6.68, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -103.0, -103.0, -103.0, -99.19, -85.84, -70.58, -57.23, -41.01, -20.99, -6.68, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -103.0, -103.0, -103.0, -99.04, -85.17, -69.32, -55.45, -38.61, -17.8, -2.94, 4.0, 4.0, 4.0, 4.0, 4.0, 0.36, 1.0, 8.08, 9.99, 659.25},
		{0.0, 0.0, 0.0, 0.0, 0.0, -98.48, -98.44, -98.14, -97.61, -96.88, -100.32, -101.74, -97.71, -77.43, -41.11, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -64.28, -64.71, -65.59, -69.86, -81.75, -86.92, -86.13, -82.47, -64.26, -33.52, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.12, 0.12, 0.12, 2.63, 5.38, 0.54, 5.89, 1.67, 1.36, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.12, 0.12, 0.04, 1.8, 0.16, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.58, 7.91, 2.13, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.12, 5.86, 3.55, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.34, 4.18, 4.1, 3.91, 2.7, 0.67, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.14, 3.84, 6.19, 3.84, 0.39, 0.29, 1.68, 5.35, 6.65, 3.53, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.96, 9.82, 15.68, 9.47, 0.98, 0.75, 4.36, 13.72, 16.89, 8.68, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.96, 9.82, 15.68, 9.47, 0.98, 0.75, 4.36, 13.72, 16.49, 7.07, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -119.0, -119.0, -119.0, -119.0, -119.0, -118.81, -117.81, -113.22, -89.9, -47.77, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -103.0, -103.0, -103.0, -103.0, -103.0, -102.83, -101.97, -98.0, -77.82, -41.41, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -103.0, -103.0, -103.0, -103.0, -103.0, -102.83, -101.93, -97.81, -76.84, -39.02, 4.0, 4.0, 4.0, 4.0, 4.0, 0.19, 1.0, 6.35, 7.02, 580.2}
    };

	// contains values for state action relationships
	private static float[][] qtable;

	// contains a list of recent actions, used to modify qtable
	private static ArrayList<Integer[]> recent_actions;

	// learning constant
	private static float gamma;

	// translates col in q table to actual button presses
	static boolean[][] possible_actions = {
			// move lefts
			{true, false, false, false, false},
			{true, false, false, false, true},
			{true, false, false, true, false},
			{true, false, false, true, true},

			// move rights
			{false, true, false, false, false},
			{false, true, false, false, true},
			{false, true, false, true, false},
			{false, true, false, true, true},

			// move not
			{false, false, false, false, false},
			{false, false, false, false, true},
			{false, false, false, true, false},
			{false, false, false, true, true},
	};

	// static variable used to keep tabs of current move at all times, updated when requested
	static boolean[] action = {false, false, false, false, false};
	// 1. left
	// 2. right
	// 3. down
	// 4. jump
	// 5. speed

	// passed current game snapshot as argument,
	// compares against centroids to determine matching state
	public static int determineState(double[] game_snap)
	{
		double min_dist = -1;
		int best_state  = -1;

		for (int i = 0; i < 76; i++)
		{
			double running_sum = 0;
			for (int j = 0; j < 305; j++)
			{
				running_sum += Math.pow((game_snap[j] - centroids[i][j]), 2);
			}
			running_sum = sqrt(running_sum);
			if (min_dist == -1)
			{
				min_dist   = running_sum;
				best_state = i;
			}
			else if (running_sum < min_dist)
			{
				min_dist   = running_sum;
				best_state = i;
			}
		}
		return best_state;
	}

	/* SEBAS CODE */



    //private int visitedClashes = 0;
    //private LevelScene lsCopy;

    //private int searchResolution = 10;

    private ArrayList<boolean[]> currentActionPlan;
    int ticksBeforeReplanning = 0;


	private class SearchNode
	{
		private int timeElapsed = 0;
		public float remainingTimeEstimated = 0;
		private float remainingTime = 0;

		public SearchNode parentPos = null;
		public SearchNode chosenChild = null;
		public LevelScene sceneSnapshot = null;
		public int distanceFromOrigin = 0;
		public boolean hasBeenHurt = false;
		public boolean isInVisitedList = false;

		boolean[] action;
		int repetitions = 1;


		public float calcRemainingTime(float marioX, float marioXA)
		{
			return (100000 - (maxForwardMovement(marioXA, 1000) + marioX))
				/ maxMarioSpeed - 1000;
		}

		public float getRemainingTime()
		{
			if (remainingTime > 0)
				return remainingTime;
			else
				return remainingTimeEstimated;
		}

		public float estimateRemainingTimeChild(boolean[] action, int repetitions)
		{
			float[] childbehaviorDistanceAndSpeed = estimateMaximumForwardMovement(
					levelScene.mario.xa, action, repetitions);
			return calcRemainingTime(levelScene.mario.x + childbehaviorDistanceAndSpeed[0],
					childbehaviorDistanceAndSpeed[1]);
		}

		public SearchNode(boolean[] action, int repetitions, SearchNode parent)
		{
	    	this.parentPos = parent;
	    	if (parent != null)
	    	{
	    		this.remainingTimeEstimated = parent.estimateRemainingTimeChild(action, repetitions);
	    		this.distanceFromOrigin = parent.distanceFromOrigin + 1;
	    	}
	    	else
	    		this.remainingTimeEstimated = calcRemainingTime(levelScene.mario.x, 0);
	    	this.action = action;
	    	this.repetitions = repetitions;
	    	if (parent != null)
	    		timeElapsed = parent.timeElapsed + repetitions;
	    	else
	    		timeElapsed = 0;
		}

		public float simulatePos()
		{
	    	// set state to parents scene
			if (parentPos.sceneSnapshot == null)
			{
				System.out.println("DAMN! NO SNAPSHOT!");
			}
			levelScene = parentPos.sceneSnapshot;
			parentPos.sceneSnapshot = backupState();

			int initialDamage = getMarioDamage();
	    	for (int i = 0; i < repetitions; i++)
	    	{
	    		/*if (debugPos < 1000)
	    		{
	    			GlobalOptions.Pos[debugPos][0] = (int) levelScene.mario.x;
	    			GlobalOptions.Pos[debugPos][1] = (int) levelScene.mario.y;
	    			debugPos++;
	    		}*/
	    		advanceStep(action);
	    		/*if (debugPos < 1000)
	    		{
	    			GlobalOptions.Pos[debugPos][0] = (int) levelScene.mario.x;
	    			GlobalOptions.Pos[debugPos][1] = (int) levelScene.mario.y;
	    			debugPos++;
	    		}*/
	    		if (debugPos > 1000)
	    			debugPos = 0;
	    	}
	    	remainingTime = calcRemainingTime(levelScene.mario.x, levelScene.mario.xa)
	    	 	+ (getMarioDamage() - initialDamage) * (1000000 - 100 * distanceFromOrigin);
	    	if (isInVisitedList)
	    		remainingTime += visitedListPenalty;
	    	hasBeenHurt = (getMarioDamage() - initialDamage) != 0;
	    	sceneSnapshot = backupState();

	    	return remainingTime;
		}

		public ArrayList<SearchNode> generateChildren()
		{
			ArrayList<SearchNode> list = new ArrayList<SearchNode>();
			ArrayList<boolean[]> possibleActions = createPossibleActions(this);

			for (boolean[] action: possibleActions)
			{
				list.add(new SearchNode(action, repetitions, this));
			}
			return list;
		}

	}



	/* SEBAS CODE */

    public NNSimulator()
    {
    	initialiseSimulator();

		// initialize arraylist for qlearning actions
		recent_actions = new ArrayList<Integer[]>();

		// initialize qtable to have values between 0 and 100
		qtable = new float[76][12];
		for (int i = 0; i < 76; i++)
		{
			for (int j = 0; j < 12; j++)
			{
				qtable[i][j] = (float)(random()*1000);
			}
		}
    }
    
    /* SEBAS CODE */



    public boolean canJumpHigher(SearchNode currentPos, boolean checkParent)
    {
    	if (currentPos.parentPos != null && checkParent
    			&& canJumpHigher(currentPos.parentPos, false))
    			return true;
    	return currentPos.sceneSnapshot.mario.mayJump() || (currentPos.sceneSnapshot.mario.jumpTime > 0);
    }
    
    private ArrayList<boolean[]> createPossibleActions(SearchNode currentPos)
    {
    	ArrayList<boolean[]> possibleActions = new ArrayList<boolean[]>();
    	// do nothing
    	//possibleActions.add(createAction(false, false, false, false, false));

    	//possibleActions.add(createAction(false, false, true, false, false));
    	// jump
    	if (canJumpHigher(currentPos, true)) possibleActions.add(createAction(false, false, false, true, false));
    	if (canJumpHigher(currentPos, true)) possibleActions.add(createAction(false, false, false, true, true));
    	
    	// run right
    	possibleActions.add(createAction(false, true, false, false, true));
    	if (canJumpHigher(currentPos, true))  possibleActions.add(createAction(false, true, false, true, true));
    	possibleActions.add(createAction(false, true, false, false, false));
    	if (canJumpHigher(currentPos, true))  possibleActions.add(createAction(false, true, false, true, false));
 	
    	// run left
    	possibleActions.add(createAction(true, false, false, false, false));
    	if (canJumpHigher(currentPos, true))  possibleActions.add(createAction(true, false, false, true, false));
    	possibleActions.add(createAction(true, false, false, false, true));
    	if (canJumpHigher(currentPos, true))  possibleActions.add(createAction(true, false, false, true, true));
  	
    	
    	// duck (probably sucks always)
    	
    	return possibleActions;
    }
    
    private boolean[] createAction(boolean left, boolean right, boolean down, boolean jump, boolean speed)
    {
    	boolean[] action = new boolean[5];
    	action[Mario.KEY_DOWN] = down;
    	action[Mario.KEY_JUMP] = jump;
    	action[Mario.KEY_LEFT] = left;
    	action[Mario.KEY_RIGHT] = right;
    	action[Mario.KEY_SPEED] = speed;
    	return action;
    }
    
    public float[] estimateMaximumForwardMovement(float currentAccel, boolean[] action, int ticks)
    {
    	float dist = 0;
    	float runningSpeed =  action[Mario.KEY_SPEED] ? 1.2f : 0.6f;
    	int dir = 0;
    	if (action[Mario.KEY_LEFT]) dir = -1;
    	if (action[Mario.KEY_RIGHT]) dir = 1;
    	for (int i = 0; i < ticks; i++)
    	{
    		currentAccel += runningSpeed * dir;
    		dist += currentAccel;
    		//System.out.println("Estimator of Fastforward Speed, Tick "+i+" speed: "+currentAccel);
    		currentAccel *= 0.89f;
    	}    	
    	float[] ret = new float[2];
    	ret[0] = dist;
    	ret[1] = currentAccel;
    	return ret;
    }
    
    // distance covered at maximum acceleration with initialSpeed for ticks timesteps 
    private float maxForwardMovement(float initialSpeed, int ticks)
    {
    	float y = ticks;
    	float s0 = initialSpeed;
    	return (float) (99.17355373 * Math.pow(0.89,y+1)
    	  -9.090909091*s0*Math.pow(0.89,y+1)
    	  +10.90909091*y-88.26446282+9.090909091*s0);
    }
    
    private int getMarioDamage()
    {
    	// early damage at gaps: Don't even fall 1 px into them.
    	if (levelScene.level.isGap[(int) (levelScene.mario.x/16)] &&
    			levelScene.mario.y > levelScene.level.gapHeight[(int) (levelScene.mario.x/16)]*16)
    	{
    		//System.out.println("Gap height: "+levelScene.level.gapHeight[(int) (levelScene.mario.x/16)]);
    		levelScene.mario.damage+=5;
    	}
    	return levelScene.mario.damage;
    }
    

    
    private void search(long startTime)
    {
    	SearchNode current = bestPosition;
    	//SearchNode furthest = bestPosition;
    	boolean currentGood = false;
    	int ticks = 0;
    	int maxRight = 176;
    	while(posPool.size() != 0 
    			//&& ((levelScene.mario.x - currentSearchStartingMarioXPos < maxRight) || !currentGood) 
    			&& ((bestPosition.sceneSnapshot.mario.x - currentSearchStartingMarioXPos < maxRight) || !currentGood) 
    			//&& ((System.currentTimeMillis() - startTime < 35) || (ticks < 200)))
    			&& (System.currentTimeMillis() - startTime < Math.min(200,timeBudget/2)))
    			//&& ticks < 200)
    	{
    		ticks++;
    		current = pickBestPos(posPool);
    		currentGood = false;
    		float realRemainingTime = current.simulatePos();
    		
    		//System.out.println("Simulated mariopos: "+ current.sceneSnapshot.mario.x + " " + current.sceneSnapshot.mario.y);
    		if (realRemainingTime < 0)
    		{
    			System.out.print("-");
    			continue;
    		}
    		else if  (!current.isInVisitedList 
    				&& isInVisited((int) current.sceneSnapshot.mario.x, (int) current.sceneSnapshot.mario.y, current.timeElapsed))
	   		{
    			if (levelScene.verbose > 12) System.out.print("V");
    			realRemainingTime += visitedListPenalty;
    			current.isInVisitedList = true;
    			current.remainingTime = realRemainingTime;
    			current.remainingTimeEstimated = realRemainingTime;
	   			/*current.pathQuality -= 100;
	   			realRemainingDist -= 100;
	   			current.remainingDistanceEstimated = realRemainingDist;
    			current.remainingDistance = realRemainingDist;*/
    			posPool.add(current); 
	   		}
    		else if (realRemainingTime - current.remainingTimeEstimated > 0.1)
    		{
    			if (levelScene.verbose > 12) System.out.print("b");
    			// current item is not as good as anticipated. put it back in pool and look for best again
    			current.remainingTimeEstimated = realRemainingTime;
    			posPool.add(current);
    		}
    		else
    		{

    			if (levelScene.verbose > 12) System.out.print("a");
    			//System.out.println("Simulated bestPos accepted! Est remaining time: "
    			//		+current.remainingTimeEstimated+" real: "+ realRemainingTime);
    			currentGood = true;
    			visited((int) current.sceneSnapshot.mario.x, (int) current.sceneSnapshot.mario.y, current.timeElapsed);
    			
    			posPool.addAll(current.generateChildren());    			
    		}
    		if (currentGood) 
    		{
    			bestPosition = current;
    			if (current.sceneSnapshot.mario.x > furthestPosition.sceneSnapshot.mario.x
    					&& !levelScene.level.isGap[(int)(current.sceneSnapshot.mario.x/16)])
    					//&& current.sceneSnapshot.mario.isOnGround())
    				furthestPosition = current;
    		}
    	}
    	if (levelScene.mario.x - currentSearchStartingMarioXPos < maxRight
    			&& furthestPosition.sceneSnapshot.mario.x > bestPosition.sceneSnapshot.mario.x + 20
    			&& (levelScene.mario.fire ||
    					levelScene.level.isGap[(int)(bestPosition.sceneSnapshot.mario.x/16)]))
    	{
    		// Couldnt plan till end of screen, take furthest
    		//System.out.println("Furthest: "+ furthestPosition.sceneSnapshot.mario.x + " best: "+ bestPosition.sceneSnapshot.mario.x);
    		bestPosition = furthestPosition;
    	}
    	
    	//bestPosition = current;
    	if (levelScene.verbose > 1) System.out.println("Search stopped. Remaining pool size: "+ posPool.size() + " Current remaining time: " + current.remainingTime);

    	levelScene = current.sceneSnapshot;
    }
    
    private void startSearch(int repetitions)
    {    	
    	if (levelScene.verbose > 1) System.out.println("Started search.");
    	SearchNode startPos = new SearchNode(null, repetitions, null);
    	startPos.sceneSnapshot = backupState();
    	
    	posPool = new ArrayList<SearchNode>();
    	//visitedStates = new ArrayList<int[]>();
    	visitedStates.clear();
    	posPool.addAll(startPos.generateChildren());
    	currentSearchStartingMarioXPos = levelScene.mario.x; 
    	
    	/*
    	if (bestPosition != null)
    	{
    		LevelScene internal = backupState();
    		// insert old plan
    		SearchNode pos = bestPosition;
    		// rewind
    		int steps = 0;
    		while (pos.parentPos != null)
    		{
    			steps++;
    			pos = pos.parentPos;
    		}
    		if (steps > 3)
    		{
	    		pos = pos.chosenChild.chosenChild.chosenChild;
	    		// go forward
	    		if (pos != null && pos.parentPos != null)
	    		{
		    		pos.parentPos.sceneSnapshot = backupState(); // overwrite previous scenesnapshot
		    		//float previousRemainingTime = pos.remainingTime;
		    		while(pos != null && pos.remainingTime == pos.simulatePos())
		    		{
		    			// same conditions
		    			SearchNode newP = new SearchNode(pos.action, pos.repetitions, pos.parentPos);
		    	    	newP.sceneSnapshot = pos.sceneSnapshot;
		    	    	newP.remainingTime = pos.remainingTime;
		    	    	newP.remainingTimeEstimated = pos.remainingTimeEstimated;
		    	    	posPool.add(newP);
		    	    	//posPool.addAll(newP.generateChildren());
		    	    	pos = pos.chosenChild;
		    	    	
		    	    }
	    		}
	    		restoreState(internal);
    		}
    	}
    	
    	
		for(int i = 0; i < 1000; i++)
		{
			GlobalOptions.Pos[i][0] = 0;
			GlobalOptions.Pos[i][1] = 0;
		}*/
    	debugPos = 0;
    	bestPosition = startPos;
    	furthestPosition = startPos;
    	
    }
    
    private ArrayList<boolean[]> extractPlan()
    {
    	ArrayList<boolean[]> actions = new ArrayList<boolean[]>();
    	
    	// just move forward if no best position exists
    	if (bestPosition == null)
    	{
    		if (levelScene.verbose > 1) System.out.println("NO BESTPOS!");
    		for (int i = 0; i < 10; i++)
    		{
    			actions.add(createAction(false, true, false, false, true));        		
    		}
    		return actions;
    	}
    	if (levelScene.verbose > 2) System.out.print("Extracting plan (reverse order): ");
    	SearchNode current = bestPosition;
    	while (current.parentPos != null)
    	{
    		for (int i = 0; i < current.repetitions; i++)
    			actions.add(0, current.action);
    		if (levelScene.verbose > 2) 
    			System.out.print("[" 
    				+ (current.action[Mario.KEY_DOWN] ? "d" : "") 
    				+ (current.action[Mario.KEY_RIGHT] ? "r" : "")
    				+ (current.action[Mario.KEY_LEFT] ? "l" : "")
    				+ (current.action[Mario.KEY_JUMP] ? "j" : "")
    				+ (current.action[Mario.KEY_SPEED] ? "s" : "") 
    				+ (current.hasBeenHurt ? "-" : "") + "]");
    		if (current.hasBeenHurt)
    		{
    			requireReplanning = true;    			
    		}
    		if (current.parentPos != null)
    			current.parentPos.chosenChild =current;
    		current = current.parentPos;
    	}
    	if (levelScene.verbose > 2) System.out.println();
		return actions;
    }
    
    public String printAction(boolean[] action)
    {
    	String s = "";
    	if (action[Mario.KEY_RIGHT]) s+= "Forward ";
    	if (action[Mario.KEY_LEFT]) s+= "Backward ";
    	if (action[Mario.KEY_SPEED]) s+= "Speed ";
    	if (action[Mario.KEY_JUMP]) s+= "Jump ";
    	if (action[Mario.KEY_DOWN]) s+= "Duck";
    	return s;
    }
    
    private SearchNode pickBestPos(ArrayList<SearchNode> posPool)
    {
    	SearchNode bestPos = null;
    	float bestPosCost = 10000000;
    	//System.out.println("Searching fitnesses.");
    	for (SearchNode current: posPool)
    	{
    		float jumpModifier = 0;    		
    		//if (current.action[Mario.KEY_JUMP]) jumpModifier = -0.0001f;
    		if (current.sceneSnapshot != null)
    		{
    			int marioX = (int) current.sceneSnapshot.mario.x / 16;
    			if (current.sceneSnapshot.level.isGap.length > marioX && current.sceneSnapshot.level.isGap[marioX])
    			{
    				//if (current.action[Mario.KEY_JUMP])
    				//	jumpModifier -= 5f;
    				//if (current.action[Mario.KEY_RIGHT])
        			//	jumpModifier -= 0.5f;
    				//if (current.action[Mario.KEY_SPEED])
        			//	jumpModifier -= 5f;
    			}
    		}
    		
    		//if (current.sceneSnapshot != null && current.sceneSnapshot.mario.y > 200) jumpModifier += 0.001f * (300-current.sceneSnapshot.mario.y);
    		float currentCost = current.getRemainingTime()
    			+ current.timeElapsed * 0.90f + jumpModifier; // slightly bias towards furthest positions 
    		//System.out.println("Looking at pos with elapsed time "+current.timeElapsed+" est time: "
    		//		+ current.getRemainingTime() + " actions: " + printAction(current.action));
    		if (currentCost < bestPosCost)
    		{
    			bestPos = current;
    			bestPosCost = currentCost;
    		}
    	}
    	posPool.remove(bestPos);
    	//System.out.println("Best Pos: elapsed time "+bestPos.timeElapsed+" est time: "
    	//			+ bestPos.getRemainingTime() + " actions: " + printAction(bestPos.action));
    	return bestPos;
    }
        
	public void initialiseSimulator()
	{
		levelScene = new LevelScene();
		levelScene.init();	
		levelScene.level = new Level(1500,15);
	}
	
	public void setLevelPart(byte[][] levelPart, float[] enemies)
	{
    	if (levelScene.setLevelScene(levelPart))
    	{
    		requireReplanning = true;
    	}
    	requireReplanning = levelScene.setEnemies(enemies);
	}
	
	public LevelScene backupState()
	{
		LevelScene sceneCopy = null;
		try
		{
			sceneCopy = (LevelScene) levelScene.clone();
		} catch (CloneNotSupportedException e)
		{
			e.printStackTrace();
		}
		
		return sceneCopy;
	}
	
	
	
	public void restoreState(LevelScene l)
	{
		levelScene = l;
	}
	
	public void advanceStep(boolean[] action)
	{
		levelScene.mario.setKeys(action);
		if (levelScene.verbose > 8) System.out.print("[" 
				+ (action[Mario.KEY_DOWN] ? "d" : "") 
				+ (action[Mario.KEY_RIGHT] ? "r" : "")
				+ (action[Mario.KEY_LEFT] ? "l" : "")
				+ (action[Mario.KEY_JUMP] ? "j" : "")
				+ (action[Mario.KEY_SPEED] ? "s" : "") + "]");
		levelScene.tick();
	}

	/* SEBAS CODE */

	public boolean[] getAction()
	{
        return action;
	}

	public static void updateQtable(float reward)
	{
		float reward_discount = 1;
		while (!recent_actions.isEmpty())
		{
			// add reward value times history discount coefficient
			qtable[recent_actions.get(0)[0]][recent_actions.get(0)[1]] += (reward * reward_discount);

			// remove this action from the list
			recent_actions.remove(0);

			// set discount coefficient for next step
			reward_discount *= gamma;
		}
	}

	public static void updateAction(double[] state, float reward)
	{
		// update qTable
		if (reward != -2500)
		{
			updateQtable(reward);

			// if death state
			if (reward == -1000)
			{
				// ensure recent_actions has been reset
				recent_actions.clear();

				// normalize q table
				float max_val = 0;
				for (int i = 0; i < 76; i++)
				{
					for (int j = 0; j < 12; j++)
					{
						// find largest magnitude in Q-table
						if (abs(qtable[i][j]) > max_val)
						{
							max_val = abs(qtable[i][j]);
						}
					}
				}

				// divide all values by max magnitude
				for (int i = 0; i < 76; i++)
				{
					for (int j = 0; j < 12; j++)
					{
						qtable[i][j] /= max_val;
						qtable[i][j] *= 1000;
					}
				}
			}
		}

		// determine what state current snap matches in qtable
		int current_state = determineState(state);

		// init before max find
		int   best_action = 0;
		float max_action_value = qtable[current_state][0];

		// find action with highest value for state
		for (int i = 1; i < 12; i++)
		{
			if (qtable[current_state][i] > max_action_value)
			{
				best_action = i;
				max_action_value = qtable[current_state][i];
			}
		}

		// update action list
		Integer[] state_action = {current_state, best_action};
		recent_actions.add(0, state_action);

		// update action to new action
		action = possible_actions[best_action];
	}

	/* SEBAS CODE */

	private void visited(int x, int y, int t)
	{
		visitedStates.add(new int[]{x,y,t});
	}
	
	private boolean isInVisited(int x, int y, int t)
	{
		int timeDiff = 5;
		int xDiff = 2;
		int yDiff = 2;
		for(int[] v: visitedStates)
		{
			if (abs(v[0] - x) < xDiff
					&& abs(v[1] - y) < yDiff
					&& abs(v[2] - t) < timeDiff
					&& t >= v[2])
			{
				return true;
			}
		}
		return false;	
		//return visitedStates.contains(new int[]{x,y,t});
	}
}